type Asset {
  ambassadors(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  ambassadorsAggregate(directed: Boolean = true, where: CitizenWhere): AssetCitizenAmbassadorsAggregationSelection
  ambassadorsConnection(after: String, directed: Boolean = true, first: Int, sort: [AssetAmbassadorsConnectionSort!], where: AssetAmbassadorsConnectionWhere): AssetAmbassadorsConnection!
  assetType: AssetType!
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): AssetCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [AssetCreatedByConnectionSort!], where: AssetCreatedByConnectionWhere): AssetCreatedByConnection!
  description: String
  geoLocation: Point
  id: ID!
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  updatedAt: DateTime!
}

type AssetAggregateSelection {
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input AssetAmbassadorsAggregateInput {
  AND: [AssetAmbassadorsAggregateInput!]
  NOT: AssetAmbassadorsAggregateInput
  OR: [AssetAmbassadorsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AssetAmbassadorsNodeAggregationWhereInput
}

input AssetAmbassadorsConnectFieldInput {
  connect: [CitizenConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input AssetAmbassadorsConnectOrCreateFieldInput {
  onCreate: AssetAmbassadorsConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input AssetAmbassadorsConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type AssetAmbassadorsConnectedRelationship {
  node: CitizenEventPayload!
}

type AssetAmbassadorsConnection {
  edges: [AssetAmbassadorsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AssetAmbassadorsConnectionSort {
  node: CitizenSort
}

input AssetAmbassadorsConnectionWhere {
  AND: [AssetAmbassadorsConnectionWhere!]
  NOT: AssetAmbassadorsConnectionWhere
  OR: [AssetAmbassadorsConnectionWhere!]
  node: CitizenWhere
}

input AssetAmbassadorsCreateFieldInput {
  node: CitizenCreateInput!
}

input AssetAmbassadorsDeleteFieldInput {
  delete: CitizenDeleteInput
  where: AssetAmbassadorsConnectionWhere
}

input AssetAmbassadorsDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: AssetAmbassadorsConnectionWhere
}

input AssetAmbassadorsFieldInput {
  connect: [AssetAmbassadorsConnectFieldInput!]
  connectOrCreate: [AssetAmbassadorsConnectOrCreateFieldInput!]
  create: [AssetAmbassadorsCreateFieldInput!]
}

input AssetAmbassadorsNodeAggregationWhereInput {
  AND: [AssetAmbassadorsNodeAggregationWhereInput!]
  NOT: AssetAmbassadorsNodeAggregationWhereInput
  OR: [AssetAmbassadorsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type AssetAmbassadorsRelationship {
  cursor: String!
  node: Citizen!
}

input AssetAmbassadorsRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input AssetAmbassadorsUpdateConnectionInput {
  node: CitizenUpdateInput
}

input AssetAmbassadorsUpdateFieldInput {
  connect: [AssetAmbassadorsConnectFieldInput!]
  connectOrCreate: [AssetAmbassadorsConnectOrCreateFieldInput!]
  create: [AssetAmbassadorsCreateFieldInput!]
  delete: [AssetAmbassadorsDeleteFieldInput!]
  disconnect: [AssetAmbassadorsDisconnectFieldInput!]
  update: AssetAmbassadorsUpdateConnectionInput
  where: AssetAmbassadorsConnectionWhere
}

type AssetCitizenAmbassadorsAggregationSelection {
  count: Int!
  node: AssetCitizenAmbassadorsNodeAggregateSelection
}

type AssetCitizenAmbassadorsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type AssetCitizenCreatedByAggregationSelection {
  count: Int!
  node: AssetCitizenCreatedByNodeAggregateSelection
}

type AssetCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input AssetConnectInput {
  ambassadors: [AssetAmbassadorsConnectFieldInput!]
  createdBy: AssetCreatedByConnectFieldInput
}

input AssetConnectOrCreateInput {
  ambassadors: [AssetAmbassadorsConnectOrCreateFieldInput!]
  createdBy: AssetCreatedByConnectOrCreateFieldInput
}

input AssetConnectOrCreateWhere {
  node: AssetUniqueWhere!
}

input AssetConnectWhere {
  node: AssetWhere!
}

type AssetConnectedRelationships {
  ambassadors: AssetAmbassadorsConnectedRelationship
  createdBy: AssetCreatedByConnectedRelationship
}

input AssetCreateInput {
  ambassadors: AssetAmbassadorsFieldInput
  assetType: AssetType!
  createdBy: AssetCreatedByFieldInput
  description: String
  geoLocation: PointInput
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
}

input AssetCreatedByAggregateInput {
  AND: [AssetCreatedByAggregateInput!]
  NOT: AssetCreatedByAggregateInput
  OR: [AssetCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AssetCreatedByNodeAggregationWhereInput
}

input AssetCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input AssetCreatedByConnectOrCreateFieldInput {
  onCreate: AssetCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input AssetCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type AssetCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type AssetCreatedByConnection {
  edges: [AssetCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AssetCreatedByConnectionSort {
  node: CitizenSort
}

input AssetCreatedByConnectionWhere {
  AND: [AssetCreatedByConnectionWhere!]
  NOT: AssetCreatedByConnectionWhere
  OR: [AssetCreatedByConnectionWhere!]
  node: CitizenWhere
}

input AssetCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input AssetCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: AssetCreatedByConnectionWhere
}

input AssetCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: AssetCreatedByConnectionWhere
}

input AssetCreatedByFieldInput {
  connect: AssetCreatedByConnectFieldInput
  connectOrCreate: AssetCreatedByConnectOrCreateFieldInput
  create: AssetCreatedByCreateFieldInput
}

input AssetCreatedByNodeAggregationWhereInput {
  AND: [AssetCreatedByNodeAggregationWhereInput!]
  NOT: AssetCreatedByNodeAggregationWhereInput
  OR: [AssetCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type AssetCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input AssetCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input AssetCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input AssetCreatedByUpdateFieldInput {
  connect: AssetCreatedByConnectFieldInput
  connectOrCreate: AssetCreatedByConnectOrCreateFieldInput
  create: AssetCreatedByCreateFieldInput
  delete: AssetCreatedByDeleteFieldInput
  disconnect: AssetCreatedByDisconnectFieldInput
  update: AssetCreatedByUpdateConnectionInput
  where: AssetCreatedByConnectionWhere
}

type AssetCreatedEvent {
  createdAsset: AssetEventPayload!
  event: EventType!
  timestamp: Float!
}

input AssetDeleteInput {
  ambassadors: [AssetAmbassadorsDeleteFieldInput!]
  createdBy: AssetCreatedByDeleteFieldInput
}

type AssetDeletedEvent {
  deletedAsset: AssetEventPayload!
  event: EventType!
  timestamp: Float!
}

input AssetDisconnectInput {
  ambassadors: [AssetAmbassadorsDisconnectFieldInput!]
  createdBy: AssetCreatedByDisconnectFieldInput
}

type AssetEdge {
  cursor: String!
  node: Asset!
}

type AssetEventPayload {
  assetType: AssetType!
  createdAt: DateTime!
  description: String
  geoLocation: Point
  id: ID!
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  updatedAt: DateTime!
}

type AssetItems {
  asset: Asset!
  quantity: Int!
}

input AssetOnCreateInput {
  assetType: AssetType!
  description: String
  geoLocation: PointInput
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
}

input AssetOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AssetSort objects to sort Assets by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AssetSort!]
}

input AssetRelationInput {
  ambassadors: [AssetAmbassadorsCreateFieldInput!]
  createdBy: AssetCreatedByCreateFieldInput
}

type AssetRelationshipCreatedEvent {
  asset: AssetEventPayload!
  createdRelationship: AssetConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input AssetRelationshipCreatedSubscriptionWhere {
  asset: AssetSubscriptionWhere
  createdRelationship: AssetRelationshipsSubscriptionWhere
}

type AssetRelationshipDeletedEvent {
  asset: AssetEventPayload!
  deletedRelationship: AssetConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input AssetRelationshipDeletedSubscriptionWhere {
  asset: AssetSubscriptionWhere
  deletedRelationship: AssetRelationshipsSubscriptionWhere
}

input AssetRelationshipsSubscriptionWhere {
  ambassadors: AssetAmbassadorsRelationshipSubscriptionWhere
  createdBy: AssetCreatedByRelationshipSubscriptionWhere
}

"""
Fields to sort Assets by. The order in which sorts are applied is not guaranteed when specifying many fields in one AssetSort object.
"""
input AssetSort {
  assetType: SortDirection
  createdAt: SortDirection
  description: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  image: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  name: SortDirection
  updatedAt: SortDirection
}

input AssetSubscriptionWhere {
  AND: [AssetSubscriptionWhere!]
  NOT: AssetSubscriptionWhere
  OR: [AssetSubscriptionWhere!]
  assetType: AssetType
  assetType_IN: [AssetType]
  createdAt: DateTime
  createdAt_IN: [DateTime]
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  image: String
  image_CONTAINS: String
  image_ENDS_WITH: String
  image_IN: [String]
  image_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

enum AssetType {
  DIGITAL_ASSET
  DIGITAL_VOUCHER
  PHYSICAL_ASSET
  PHYSICAL_VOUCHER
}

input AssetUniqueWhere {
  id: ID
}

input AssetUpdateInput {
  ambassadors: [AssetAmbassadorsUpdateFieldInput!]
  assetType: AssetType
  createdBy: AssetCreatedByUpdateFieldInput
  description: String
  geoLocation: PointInput
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String
}

type AssetUpdatedEvent {
  event: EventType!
  previousState: AssetEventPayload!
  timestamp: Float!
  updatedAsset: AssetEventPayload!
}

input AssetWhere {
  AND: [AssetWhere!]
  NOT: AssetWhere
  OR: [AssetWhere!]
  ambassadorsAggregate: AssetAmbassadorsAggregateInput
  ambassadorsConnection_ALL: AssetAmbassadorsConnectionWhere
  ambassadorsConnection_NONE: AssetAmbassadorsConnectionWhere
  ambassadorsConnection_SINGLE: AssetAmbassadorsConnectionWhere
  ambassadorsConnection_SOME: AssetAmbassadorsConnectionWhere

  """Return Assets where all of the related Citizens match this filter"""
  ambassadors_ALL: CitizenWhere

  """Return Assets where none of the related Citizens match this filter"""
  ambassadors_NONE: CitizenWhere

  """Return Assets where one of the related Citizens match this filter"""
  ambassadors_SINGLE: CitizenWhere

  """Return Assets where some of the related Citizens match this filter"""
  ambassadors_SOME: CitizenWhere
  assetType: AssetType
  assetType_IN: [AssetType!]
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: AssetCreatedByAggregateInput
  createdByConnection: AssetCreatedByConnectionWhere
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  image: String
  image_CONTAINS: String
  image_ENDS_WITH: String
  image_IN: [String]
  image_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type AssetsConnection {
  edges: [AssetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Cause implements Entity {
  ambassadors(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  ambassadorsAggregate(directed: Boolean = true, where: CitizenWhere): CauseCitizenAmbassadorsAggregationSelection
  ambassadorsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAmbassadorsConnectionSort!], where: EntityAmbassadorsConnectionWhere): EntityAmbassadorsConnection!
  assets(directed: Boolean = true, options: AssetOptions, where: AssetWhere): [Asset!]!
  assetsAggregate(directed: Boolean = true, where: AssetWhere): CauseAssetAssetsAggregationSelection
  assetsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAssetsConnectionSort!], where: EntityAssetsConnectionWhere): EntityAssetsConnection!
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): CauseCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [CauseCreatedByConnectionSort!], where: CauseCreatedByConnectionWhere): CauseCreatedByConnection!
  email: String
  endDate: Date!
  founder(directed: Boolean = true, options: QueryOptions, where: FounderWhere): Founder!
  founderConnection(after: String, directed: Boolean = true, first: Int, where: CauseFounderConnectionWhere): CauseFounderConnection!
  fundsBalance: GenericBalance!
  geoLocation: Point
  goods(directed: Boolean = true, options: GoodOptions, where: GoodWhere): [Good!]!
  goodsAggregate(directed: Boolean = true, where: GoodWhere): CauseGoodGoodsAggregationSelection
  goodsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityGoodsConnectionSort!], where: EntityGoodsConnectionWhere): EntityGoodsConnection!
  id: ID!
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  startDate: Date!
  taxNo: String!
  transactions(directed: Boolean = true, options: TransactionOptions, where: TransactionWhere): [Transaction!]!
  transactionsAggregate(directed: Boolean = true, where: TransactionWhere): CauseTransactionTransactionsAggregationSelection
  transactionsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityTransactionsConnectionSort!], where: EntityTransactionsConnectionWhere): EntityTransactionsConnection!
  updatedAt: DateTime!
  volunteerTimeHoursBalance: GenericBalance!
}

type CauseAggregateSelection {
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CauseAmbassadorsAggregateInput {
  AND: [CauseAmbassadorsAggregateInput!]
  NOT: CauseAmbassadorsAggregateInput
  OR: [CauseAmbassadorsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CauseAmbassadorsNodeAggregationWhereInput
}

type CauseAmbassadorsConnectedRelationship {
  node: CitizenEventPayload!
}

input CauseAmbassadorsNodeAggregationWhereInput {
  AND: [CauseAmbassadorsNodeAggregationWhereInput!]
  NOT: CauseAmbassadorsNodeAggregationWhereInput
  OR: [CauseAmbassadorsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CauseAmbassadorsRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

type CauseAssetAssetsAggregationSelection {
  count: Int!
  node: CauseAssetAssetsNodeAggregateSelection
}

type CauseAssetAssetsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CauseAssetsAggregateInput {
  AND: [CauseAssetsAggregateInput!]
  NOT: CauseAssetsAggregateInput
  OR: [CauseAssetsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CauseAssetsNodeAggregationWhereInput
}

type CauseAssetsConnectedRelationship {
  node: AssetEventPayload!
}

input CauseAssetsNodeAggregationWhereInput {
  AND: [CauseAssetsNodeAggregationWhereInput!]
  NOT: CauseAssetsNodeAggregationWhereInput
  OR: [CauseAssetsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CauseAssetsRelationshipSubscriptionWhere {
  node: AssetSubscriptionWhere
}

type CauseCitizenAmbassadorsAggregationSelection {
  count: Int!
  node: CauseCitizenAmbassadorsNodeAggregateSelection
}

type CauseCitizenAmbassadorsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type CauseCitizenCreatedByAggregationSelection {
  count: Int!
  node: CauseCitizenCreatedByNodeAggregateSelection
}

type CauseCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CauseConnectInput {
  ambassadors: [EntityAmbassadorsConnectFieldInput!]
  assets: [EntityAssetsConnectFieldInput!]
  createdBy: CauseCreatedByConnectFieldInput
  founder: CauseFounderConnectInput
  goods: [EntityGoodsConnectFieldInput!]
  transactions: [EntityTransactionsConnectFieldInput!]
}

input CauseConnectOrCreateInput {
  ambassadors: [EntityAmbassadorsConnectOrCreateFieldInput!]
  assets: [EntityAssetsConnectOrCreateFieldInput!]
  createdBy: CauseCreatedByConnectOrCreateFieldInput
  founder: CauseFounderConnectOrCreateInput
  goods: [EntityGoodsConnectOrCreateFieldInput!]
  transactions: [EntityTransactionsConnectOrCreateFieldInput!]
}

input CauseConnectOrCreateWhere {
  node: CauseUniqueWhere!
}

input CauseConnectWhere {
  node: CauseWhere!
}

type CauseConnectedRelationships {
  ambassadors: CauseAmbassadorsConnectedRelationship
  assets: CauseAssetsConnectedRelationship
  createdBy: CauseCreatedByConnectedRelationship
  founder: CauseFounderConnectedRelationship
  goods: CauseGoodsConnectedRelationship
  transactions: CauseTransactionsConnectedRelationship
}

input CauseCreateInput {
  ambassadors: EntityAmbassadorsFieldInput
  assets: EntityAssetsFieldInput
  createdBy: CauseCreatedByFieldInput
  email: String
  endDate: Date!
  founder: CauseFounderCreateInput
  geoLocation: PointInput
  goods: EntityGoodsFieldInput
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  startDate: Date!
  taxNo: String!
  transactions: EntityTransactionsFieldInput
}

input CauseCreatedByAggregateInput {
  AND: [CauseCreatedByAggregateInput!]
  NOT: CauseCreatedByAggregateInput
  OR: [CauseCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CauseCreatedByNodeAggregationWhereInput
}

input CauseCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input CauseCreatedByConnectOrCreateFieldInput {
  onCreate: CauseCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input CauseCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type CauseCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type CauseCreatedByConnection {
  edges: [CauseCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CauseCreatedByConnectionSort {
  node: CitizenSort
}

input CauseCreatedByConnectionWhere {
  AND: [CauseCreatedByConnectionWhere!]
  NOT: CauseCreatedByConnectionWhere
  OR: [CauseCreatedByConnectionWhere!]
  node: CitizenWhere
}

input CauseCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input CauseCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: CauseCreatedByConnectionWhere
}

input CauseCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: CauseCreatedByConnectionWhere
}

input CauseCreatedByFieldInput {
  connect: CauseCreatedByConnectFieldInput
  connectOrCreate: CauseCreatedByConnectOrCreateFieldInput
  create: CauseCreatedByCreateFieldInput
}

input CauseCreatedByNodeAggregationWhereInput {
  AND: [CauseCreatedByNodeAggregationWhereInput!]
  NOT: CauseCreatedByNodeAggregationWhereInput
  OR: [CauseCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type CauseCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input CauseCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input CauseCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input CauseCreatedByUpdateFieldInput {
  connect: CauseCreatedByConnectFieldInput
  connectOrCreate: CauseCreatedByConnectOrCreateFieldInput
  create: CauseCreatedByCreateFieldInput
  delete: CauseCreatedByDeleteFieldInput
  disconnect: CauseCreatedByDisconnectFieldInput
  update: CauseCreatedByUpdateConnectionInput
  where: CauseCreatedByConnectionWhere
}

type CauseCreatedEvent {
  createdCause: CauseEventPayload!
  event: EventType!
  timestamp: Float!
}

input CauseDeleteInput {
  ambassadors: [EntityAmbassadorsDeleteFieldInput!]
  assets: [EntityAssetsDeleteFieldInput!]
  createdBy: CauseCreatedByDeleteFieldInput
  founder: CauseFounderDeleteInput
  goods: [EntityGoodsDeleteFieldInput!]
  transactions: [EntityTransactionsDeleteFieldInput!]
}

type CauseDeletedEvent {
  deletedCause: CauseEventPayload!
  event: EventType!
  timestamp: Float!
}

input CauseDisconnectInput {
  ambassadors: [EntityAmbassadorsDisconnectFieldInput!]
  assets: [EntityAssetsDisconnectFieldInput!]
  createdBy: CauseCreatedByDisconnectFieldInput
  founder: CauseFounderDisconnectInput
  goods: [EntityGoodsDisconnectFieldInput!]
  transactions: [EntityTransactionsDisconnectFieldInput!]
}

type CauseEdge {
  cursor: String!
  node: Cause!
}

type CauseEventPayload implements EntityEventPayload {
  ambassadors: [Citizen!]!
  ambassadorsConnection: EntityAmbassadorsConnection!
  assets: [Asset!]!
  assetsConnection: EntityAssetsConnection!
  createdAt: DateTime!
  email: String
  endDate: Date!
  geoLocation: Point
  goods: [Good!]!
  goodsConnection: EntityGoodsConnection!
  id: ID!
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  startDate: Date!
  taxNo: String!
  transactions: [Transaction!]!
  transactionsConnection: EntityTransactionsConnection!
  updatedAt: DateTime!
}

input CauseFounderCitizenConnectFieldInput {
  connect: CitizenConnectInput
  where: CitizenConnectWhere
}

input CauseFounderCitizenConnectOrCreateFieldInput {
  onCreate: CauseFounderCitizenConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input CauseFounderCitizenConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

input CauseFounderCitizenConnectionWhere {
  AND: [CauseFounderCitizenConnectionWhere!]
  NOT: CauseFounderCitizenConnectionWhere
  OR: [CauseFounderCitizenConnectionWhere!]
  node: CitizenWhere
}

input CauseFounderCitizenCreateFieldInput {
  node: CitizenCreateInput!
}

input CauseFounderCitizenDeleteFieldInput {
  delete: CitizenDeleteInput
  where: CauseFounderCitizenConnectionWhere
}

input CauseFounderCitizenDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: CauseFounderCitizenConnectionWhere
}

input CauseFounderCitizenFieldInput {
  connect: CauseFounderCitizenConnectFieldInput
  connectOrCreate: CauseFounderCitizenConnectOrCreateFieldInput
  create: CauseFounderCitizenCreateFieldInput
}

input CauseFounderCitizenSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input CauseFounderCitizenUpdateConnectionInput {
  node: CitizenUpdateInput
}

input CauseFounderCitizenUpdateFieldInput {
  connect: CauseFounderCitizenConnectFieldInput
  connectOrCreate: CauseFounderCitizenConnectOrCreateFieldInput
  create: CauseFounderCitizenCreateFieldInput
  delete: CauseFounderCitizenDeleteFieldInput
  disconnect: CauseFounderCitizenDisconnectFieldInput
  update: CauseFounderCitizenUpdateConnectionInput
  where: CauseFounderCitizenConnectionWhere
}

input CauseFounderConnectInput {
  Citizen: CauseFounderCitizenConnectFieldInput
  Organization: CauseFounderOrganizationConnectFieldInput
}

input CauseFounderConnectOrCreateInput {
  Citizen: CauseFounderCitizenConnectOrCreateFieldInput
  Organization: CauseFounderOrganizationConnectOrCreateFieldInput
}

type CauseFounderConnectedRelationship {
  node: FounderEventPayload!
}

type CauseFounderConnection {
  edges: [CauseFounderRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CauseFounderConnectionWhere {
  Citizen: CauseFounderCitizenConnectionWhere
  Organization: CauseFounderOrganizationConnectionWhere
}

input CauseFounderCreateFieldInput {
  Citizen: [CauseFounderCitizenCreateFieldInput!]
  Organization: [CauseFounderOrganizationCreateFieldInput!]
}

input CauseFounderCreateInput {
  Citizen: CauseFounderCitizenFieldInput
  Organization: CauseFounderOrganizationFieldInput
}

input CauseFounderDeleteInput {
  Citizen: CauseFounderCitizenDeleteFieldInput
  Organization: CauseFounderOrganizationDeleteFieldInput
}

input CauseFounderDisconnectInput {
  Citizen: CauseFounderCitizenDisconnectFieldInput
  Organization: CauseFounderOrganizationDisconnectFieldInput
}

input CauseFounderOrganizationConnectFieldInput {
  connect: OrganizationConnectInput
  where: OrganizationConnectWhere
}

input CauseFounderOrganizationConnectOrCreateFieldInput {
  onCreate: CauseFounderOrganizationConnectOrCreateFieldInputOnCreate!
  where: OrganizationConnectOrCreateWhere!
}

input CauseFounderOrganizationConnectOrCreateFieldInputOnCreate {
  node: OrganizationOnCreateInput!
}

input CauseFounderOrganizationConnectionWhere {
  AND: [CauseFounderOrganizationConnectionWhere!]
  NOT: CauseFounderOrganizationConnectionWhere
  OR: [CauseFounderOrganizationConnectionWhere!]
  node: OrganizationWhere
}

input CauseFounderOrganizationCreateFieldInput {
  node: OrganizationCreateInput!
}

input CauseFounderOrganizationDeleteFieldInput {
  delete: OrganizationDeleteInput
  where: CauseFounderOrganizationConnectionWhere
}

input CauseFounderOrganizationDisconnectFieldInput {
  disconnect: OrganizationDisconnectInput
  where: CauseFounderOrganizationConnectionWhere
}

input CauseFounderOrganizationFieldInput {
  connect: CauseFounderOrganizationConnectFieldInput
  connectOrCreate: CauseFounderOrganizationConnectOrCreateFieldInput
  create: CauseFounderOrganizationCreateFieldInput
}

input CauseFounderOrganizationSubscriptionWhere {
  node: OrganizationSubscriptionWhere
}

input CauseFounderOrganizationUpdateConnectionInput {
  node: OrganizationUpdateInput
}

input CauseFounderOrganizationUpdateFieldInput {
  connect: CauseFounderOrganizationConnectFieldInput
  connectOrCreate: CauseFounderOrganizationConnectOrCreateFieldInput
  create: CauseFounderOrganizationCreateFieldInput
  delete: CauseFounderOrganizationDeleteFieldInput
  disconnect: CauseFounderOrganizationDisconnectFieldInput
  update: CauseFounderOrganizationUpdateConnectionInput
  where: CauseFounderOrganizationConnectionWhere
}

type CauseFounderRelationship {
  cursor: String!
  node: Founder!
}

input CauseFounderRelationshipSubscriptionWhere {
  Citizen: CauseFounderCitizenSubscriptionWhere
  Organization: CauseFounderOrganizationSubscriptionWhere
}

input CauseFounderUpdateInput {
  Citizen: CauseFounderCitizenUpdateFieldInput
  Organization: CauseFounderOrganizationUpdateFieldInput
}

type CauseGoodGoodsAggregationSelection {
  count: Int!
  node: CauseGoodGoodsNodeAggregateSelection
}

type CauseGoodGoodsNodeAggregateSelection {
  barCode: StringAggregateSelectionNullable!
  code: StringAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CauseGoodsAggregateInput {
  AND: [CauseGoodsAggregateInput!]
  NOT: CauseGoodsAggregateInput
  OR: [CauseGoodsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CauseGoodsNodeAggregationWhereInput
}

type CauseGoodsConnectedRelationship {
  node: GoodEventPayload!
}

input CauseGoodsNodeAggregationWhereInput {
  AND: [CauseGoodsNodeAggregationWhereInput!]
  NOT: CauseGoodsNodeAggregationWhereInput
  OR: [CauseGoodsNodeAggregationWhereInput!]
  barCode_AVERAGE_LENGTH_EQUAL: Float
  barCode_AVERAGE_LENGTH_GT: Float
  barCode_AVERAGE_LENGTH_GTE: Float
  barCode_AVERAGE_LENGTH_LT: Float
  barCode_AVERAGE_LENGTH_LTE: Float
  barCode_LONGEST_LENGTH_EQUAL: Int
  barCode_LONGEST_LENGTH_GT: Int
  barCode_LONGEST_LENGTH_GTE: Int
  barCode_LONGEST_LENGTH_LT: Int
  barCode_LONGEST_LENGTH_LTE: Int
  barCode_SHORTEST_LENGTH_EQUAL: Int
  barCode_SHORTEST_LENGTH_GT: Int
  barCode_SHORTEST_LENGTH_GTE: Int
  barCode_SHORTEST_LENGTH_LT: Int
  barCode_SHORTEST_LENGTH_LTE: Int
  code_AVERAGE_LENGTH_EQUAL: Float
  code_AVERAGE_LENGTH_GT: Float
  code_AVERAGE_LENGTH_GTE: Float
  code_AVERAGE_LENGTH_LT: Float
  code_AVERAGE_LENGTH_LTE: Float
  code_LONGEST_LENGTH_EQUAL: Int
  code_LONGEST_LENGTH_GT: Int
  code_LONGEST_LENGTH_GTE: Int
  code_LONGEST_LENGTH_LT: Int
  code_LONGEST_LENGTH_LTE: Int
  code_SHORTEST_LENGTH_EQUAL: Int
  code_SHORTEST_LENGTH_GT: Int
  code_SHORTEST_LENGTH_GTE: Int
  code_SHORTEST_LENGTH_LT: Int
  code_SHORTEST_LENGTH_LTE: Int
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CauseGoodsRelationshipSubscriptionWhere {
  node: GoodSubscriptionWhere
}

input CauseOnCreateInput {
  email: String
  endDate: Date!
  geoLocation: PointInput
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  startDate: Date!
  taxNo: String!
}

input CauseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CauseSort objects to sort Causes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CauseSort!]
}

input CauseRelationInput {
  ambassadors: [EntityAmbassadorsCreateFieldInput!]
  assets: [EntityAssetsCreateFieldInput!]
  createdBy: CauseCreatedByCreateFieldInput
  founder: CauseFounderCreateFieldInput
  goods: [EntityGoodsCreateFieldInput!]
  transactions: [EntityTransactionsCreateFieldInput!]
}

type CauseRelationshipCreatedEvent {
  cause: CauseEventPayload!
  createdRelationship: CauseConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input CauseRelationshipCreatedSubscriptionWhere {
  cause: CauseSubscriptionWhere
  createdRelationship: CauseRelationshipsSubscriptionWhere
}

type CauseRelationshipDeletedEvent {
  cause: CauseEventPayload!
  deletedRelationship: CauseConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input CauseRelationshipDeletedSubscriptionWhere {
  cause: CauseSubscriptionWhere
  deletedRelationship: CauseRelationshipsSubscriptionWhere
}

input CauseRelationshipsSubscriptionWhere {
  ambassadors: CauseAmbassadorsRelationshipSubscriptionWhere
  assets: CauseAssetsRelationshipSubscriptionWhere
  createdBy: CauseCreatedByRelationshipSubscriptionWhere
  founder: CauseFounderRelationshipSubscriptionWhere
  goods: CauseGoodsRelationshipSubscriptionWhere
  transactions: CauseTransactionsRelationshipSubscriptionWhere
}

"""
Fields to sort Causes by. The order in which sorts are applied is not guaranteed when specifying many fields in one CauseSort object.
"""
input CauseSort {
  createdAt: SortDirection
  email: SortDirection
  endDate: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  image: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  name: SortDirection
  startDate: SortDirection
  taxNo: SortDirection
  updatedAt: SortDirection
}

input CauseSubscriptionWhere {
  AND: [CauseSubscriptionWhere!]
  NOT: CauseSubscriptionWhere
  OR: [CauseSubscriptionWhere!]
  createdAt: DateTime
  createdAt_IN: [DateTime]
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  endDate: Date
  endDate_IN: [Date]
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  image: String
  image_CONTAINS: String
  image_ENDS_WITH: String
  image_IN: [String]
  image_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
  startDate: Date
  startDate_IN: [Date]
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String]
  taxNo_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

type CauseTransactionTransactionsAggregationSelection {
  count: Int!
  node: CauseTransactionTransactionsNodeAggregateSelection
}

type CauseTransactionTransactionsNodeAggregateSelection {
  amount: FloatAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CauseTransactionsAggregateInput {
  AND: [CauseTransactionsAggregateInput!]
  NOT: CauseTransactionsAggregateInput
  OR: [CauseTransactionsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CauseTransactionsNodeAggregationWhereInput
}

type CauseTransactionsConnectedRelationship {
  node: TransactionEventPayload!
}

input CauseTransactionsNodeAggregationWhereInput {
  AND: [CauseTransactionsNodeAggregationWhereInput!]
  NOT: CauseTransactionsNodeAggregationWhereInput
  OR: [CauseTransactionsNodeAggregationWhereInput!]
  amount_AVERAGE_EQUAL: Float
  amount_AVERAGE_GT: Float
  amount_AVERAGE_GTE: Float
  amount_AVERAGE_LT: Float
  amount_AVERAGE_LTE: Float
  amount_MAX_EQUAL: Float
  amount_MAX_GT: Float
  amount_MAX_GTE: Float
  amount_MAX_LT: Float
  amount_MAX_LTE: Float
  amount_MIN_EQUAL: Float
  amount_MIN_GT: Float
  amount_MIN_GTE: Float
  amount_MIN_LT: Float
  amount_MIN_LTE: Float
  amount_SUM_EQUAL: Float
  amount_SUM_GT: Float
  amount_SUM_GTE: Float
  amount_SUM_LT: Float
  amount_SUM_LTE: Float
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CauseTransactionsRelationshipSubscriptionWhere {
  node: TransactionSubscriptionWhere
}

input CauseUniqueWhere {
  id: ID
  name: String
  taxNo: String
}

input CauseUpdateInput {
  ambassadors: [EntityAmbassadorsUpdateFieldInput!]
  assets: [EntityAssetsUpdateFieldInput!]
  createdBy: CauseCreatedByUpdateFieldInput
  email: String
  endDate: Date
  founder: CauseFounderUpdateInput
  geoLocation: PointInput
  goods: [EntityGoodsUpdateFieldInput!]
  image: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String
  startDate: Date
  taxNo: String
  transactions: [EntityTransactionsUpdateFieldInput!]
}

type CauseUpdatedEvent {
  event: EventType!
  previousState: CauseEventPayload!
  timestamp: Float!
  updatedCause: CauseEventPayload!
}

input CauseWhere {
  AND: [CauseWhere!]
  NOT: CauseWhere
  OR: [CauseWhere!]
  ambassadorsAggregate: CauseAmbassadorsAggregateInput
  ambassadorsConnection_ALL: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_NONE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SINGLE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SOME: EntityAmbassadorsConnectionWhere

  """Return Causes where all of the related Citizens match this filter"""
  ambassadors_ALL: CitizenWhere

  """Return Causes where none of the related Citizens match this filter"""
  ambassadors_NONE: CitizenWhere

  """Return Causes where one of the related Citizens match this filter"""
  ambassadors_SINGLE: CitizenWhere

  """Return Causes where some of the related Citizens match this filter"""
  ambassadors_SOME: CitizenWhere
  assetsAggregate: CauseAssetsAggregateInput
  assetsConnection_ALL: EntityAssetsConnectionWhere
  assetsConnection_NONE: EntityAssetsConnectionWhere
  assetsConnection_SINGLE: EntityAssetsConnectionWhere
  assetsConnection_SOME: EntityAssetsConnectionWhere

  """Return Causes where all of the related Assets match this filter"""
  assets_ALL: AssetWhere

  """Return Causes where none of the related Assets match this filter"""
  assets_NONE: AssetWhere

  """Return Causes where one of the related Assets match this filter"""
  assets_SINGLE: AssetWhere

  """Return Causes where some of the related Assets match this filter"""
  assets_SOME: AssetWhere
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: CauseCreatedByAggregateInput
  createdByConnection: CauseCreatedByConnectionWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  endDate: Date
  endDate_GT: Date
  endDate_GTE: Date
  endDate_IN: [Date!]
  endDate_LT: Date
  endDate_LTE: Date
  founderConnection: CauseFounderConnectionWhere
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  goodsAggregate: CauseGoodsAggregateInput
  goodsConnection_ALL: EntityGoodsConnectionWhere
  goodsConnection_NONE: EntityGoodsConnectionWhere
  goodsConnection_SINGLE: EntityGoodsConnectionWhere
  goodsConnection_SOME: EntityGoodsConnectionWhere

  """Return Causes where all of the related Goods match this filter"""
  goods_ALL: GoodWhere

  """Return Causes where none of the related Goods match this filter"""
  goods_NONE: GoodWhere

  """Return Causes where one of the related Goods match this filter"""
  goods_SINGLE: GoodWhere

  """Return Causes where some of the related Goods match this filter"""
  goods_SOME: GoodWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  image: String
  image_CONTAINS: String
  image_ENDS_WITH: String
  image_IN: [String]
  image_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  startDate: Date
  startDate_GT: Date
  startDate_GTE: Date
  startDate_IN: [Date!]
  startDate_LT: Date
  startDate_LTE: Date
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String!]
  taxNo_STARTS_WITH: String
  transactionsAggregate: CauseTransactionsAggregateInput
  transactionsConnection_ALL: EntityTransactionsConnectionWhere
  transactionsConnection_NONE: EntityTransactionsConnectionWhere
  transactionsConnection_SINGLE: EntityTransactionsConnectionWhere
  transactionsConnection_SOME: EntityTransactionsConnectionWhere

  """Return Causes where all of the related Transactions match this filter"""
  transactions_ALL: TransactionWhere

  """Return Causes where none of the related Transactions match this filter"""
  transactions_NONE: TransactionWhere

  """Return Causes where one of the related Transactions match this filter"""
  transactions_SINGLE: TransactionWhere

  """Return Causes where some of the related Transactions match this filter"""
  transactions_SOME: TransactionWhere
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type CausesConnection {
  edges: [CauseEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Citizen implements Entity {
  ambassadors(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  ambassadorsAggregate(directed: Boolean = true, where: CitizenWhere): CitizenCitizenAmbassadorsAggregationSelection
  ambassadorsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAmbassadorsConnectionSort!], where: EntityAmbassadorsConnectionWhere): EntityAmbassadorsConnection!
  assets(directed: Boolean = true, options: AssetOptions, where: AssetWhere): [Asset!]!
  assetsAggregate(directed: Boolean = true, where: AssetWhere): CitizenAssetAssetsAggregationSelection
  assetsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAssetsConnectionSort!], where: EntityAssetsConnectionWhere): EntityAssetsConnection!
  born(directed: Boolean = true, options: SourceOptions, where: SourceWhere): Source!
  bornAggregate(directed: Boolean = true, where: SourceWhere): CitizenSourceBornAggregationSelection
  bornConnection(after: String, directed: Boolean = true, first: Int, sort: [CitizenBornConnectionSort!], where: CitizenBornConnectionWhere): CitizenBornConnection!
  causes(directed: Boolean = true, options: CauseOptions, where: CauseWhere): [Cause!]!
  causesAggregate(directed: Boolean = true, where: CauseWhere): CitizenCauseCausesAggregationSelection
  causesConnection(after: String, directed: Boolean = true, first: Int, sort: [CitizenCausesConnectionSort!], where: CitizenCausesConnectionWhere): CitizenCausesConnection!
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): CitizenCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [CitizenCreatedByConnectionSort!], where: CitizenCreatedByConnectionWhere): CitizenCreatedByConnection!
  email: String
  fundsBalance: GenericBalance!
  geoLocation: Point
  goods(directed: Boolean = true, options: GoodOptions, where: GoodWhere): [Good!]!
  goodsAggregate(directed: Boolean = true, where: GoodWhere): CitizenGoodGoodsAggregationSelection
  goodsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityGoodsConnectionSort!], where: EntityGoodsConnectionWhere): EntityGoodsConnection!
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  phoneNumber: String!
  roles: [String!]
  taxNo: String!
  transactions(directed: Boolean = true, options: TransactionOptions, where: TransactionWhere): [Transaction!]!
  transactionsAggregate(directed: Boolean = true, where: TransactionWhere): CitizenTransactionTransactionsAggregationSelection
  transactionsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityTransactionsConnectionSort!], where: EntityTransactionsConnectionWhere): EntityTransactionsConnection!
  updatedAt: DateTime!
  volunteerTimeHoursBalance: GenericBalance!
}

type CitizenAggregateSelection {
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenAmbassadorsAggregateInput {
  AND: [CitizenAmbassadorsAggregateInput!]
  NOT: CitizenAmbassadorsAggregateInput
  OR: [CitizenAmbassadorsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenAmbassadorsNodeAggregationWhereInput
}

type CitizenAmbassadorsConnectedRelationship {
  node: CitizenEventPayload!
}

input CitizenAmbassadorsNodeAggregationWhereInput {
  AND: [CitizenAmbassadorsNodeAggregationWhereInput!]
  NOT: CitizenAmbassadorsNodeAggregationWhereInput
  OR: [CitizenAmbassadorsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CitizenAmbassadorsRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

type CitizenAssetAssetsAggregationSelection {
  count: Int!
  node: CitizenAssetAssetsNodeAggregateSelection
}

type CitizenAssetAssetsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenAssetsAggregateInput {
  AND: [CitizenAssetsAggregateInput!]
  NOT: CitizenAssetsAggregateInput
  OR: [CitizenAssetsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenAssetsNodeAggregationWhereInput
}

type CitizenAssetsConnectedRelationship {
  node: AssetEventPayload!
}

input CitizenAssetsNodeAggregationWhereInput {
  AND: [CitizenAssetsNodeAggregationWhereInput!]
  NOT: CitizenAssetsNodeAggregationWhereInput
  OR: [CitizenAssetsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CitizenAssetsRelationshipSubscriptionWhere {
  node: AssetSubscriptionWhere
}

input CitizenBornAggregateInput {
  AND: [CitizenBornAggregateInput!]
  NOT: CitizenBornAggregateInput
  OR: [CitizenBornAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenBornNodeAggregationWhereInput
}

input CitizenBornConnectFieldInput {
  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: SourceConnectWhere
}

type CitizenBornConnectedRelationship {
  node: SourceEventPayload!
}

type CitizenBornConnection {
  edges: [CitizenBornRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CitizenBornConnectionSort {
  node: SourceSort
}

input CitizenBornConnectionWhere {
  AND: [CitizenBornConnectionWhere!]
  NOT: CitizenBornConnectionWhere
  OR: [CitizenBornConnectionWhere!]
  node: SourceWhere
}

input CitizenBornCreateFieldInput {
  node: SourceCreateInput!
}

input CitizenBornDeleteFieldInput {
  where: CitizenBornConnectionWhere
}

input CitizenBornDisconnectFieldInput {
  where: CitizenBornConnectionWhere
}

input CitizenBornFieldInput {
  connect: CitizenBornConnectFieldInput
  create: CitizenBornCreateFieldInput
}

input CitizenBornNodeAggregationWhereInput {
  AND: [CitizenBornNodeAggregationWhereInput!]
  NOT: CitizenBornNodeAggregationWhereInput
  OR: [CitizenBornNodeAggregationWhereInput!]
  id_AVERAGE_LENGTH_EQUAL: Float
  id_AVERAGE_LENGTH_GT: Float
  id_AVERAGE_LENGTH_GTE: Float
  id_AVERAGE_LENGTH_LT: Float
  id_AVERAGE_LENGTH_LTE: Float
  id_LONGEST_LENGTH_EQUAL: Int
  id_LONGEST_LENGTH_GT: Int
  id_LONGEST_LENGTH_GTE: Int
  id_LONGEST_LENGTH_LT: Int
  id_LONGEST_LENGTH_LTE: Int
  id_SHORTEST_LENGTH_EQUAL: Int
  id_SHORTEST_LENGTH_GT: Int
  id_SHORTEST_LENGTH_GTE: Int
  id_SHORTEST_LENGTH_LT: Int
  id_SHORTEST_LENGTH_LTE: Int
}

type CitizenBornRelationship {
  cursor: String!
  node: Source!
}

input CitizenBornRelationshipSubscriptionWhere {
  node: SourceSubscriptionWhere
}

input CitizenBornUpdateConnectionInput {
  node: SourceUpdateInput
}

input CitizenBornUpdateFieldInput {
  connect: CitizenBornConnectFieldInput
  create: CitizenBornCreateFieldInput
  delete: CitizenBornDeleteFieldInput
  disconnect: CitizenBornDisconnectFieldInput
  update: CitizenBornUpdateConnectionInput
  where: CitizenBornConnectionWhere
}

type CitizenCauseCausesAggregationSelection {
  count: Int!
  node: CitizenCauseCausesNodeAggregateSelection
}

type CitizenCauseCausesNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenCausesAggregateInput {
  AND: [CitizenCausesAggregateInput!]
  NOT: CitizenCausesAggregateInput
  OR: [CitizenCausesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenCausesNodeAggregationWhereInput
}

input CitizenCausesConnectFieldInput {
  connect: [CauseConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CauseConnectWhere
}

input CitizenCausesConnectOrCreateFieldInput {
  onCreate: CitizenCausesConnectOrCreateFieldInputOnCreate!
  where: CauseConnectOrCreateWhere!
}

input CitizenCausesConnectOrCreateFieldInputOnCreate {
  node: CauseOnCreateInput!
}

type CitizenCausesConnectedRelationship {
  node: CauseEventPayload!
}

type CitizenCausesConnection {
  edges: [CitizenCausesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CitizenCausesConnectionSort {
  node: CauseSort
}

input CitizenCausesConnectionWhere {
  AND: [CitizenCausesConnectionWhere!]
  NOT: CitizenCausesConnectionWhere
  OR: [CitizenCausesConnectionWhere!]
  node: CauseWhere
}

input CitizenCausesCreateFieldInput {
  node: CauseCreateInput!
}

input CitizenCausesDeleteFieldInput {
  delete: CauseDeleteInput
  where: CitizenCausesConnectionWhere
}

input CitizenCausesDisconnectFieldInput {
  disconnect: CauseDisconnectInput
  where: CitizenCausesConnectionWhere
}

input CitizenCausesFieldInput {
  connect: [CitizenCausesConnectFieldInput!]
  connectOrCreate: [CitizenCausesConnectOrCreateFieldInput!]
  create: [CitizenCausesCreateFieldInput!]
}

input CitizenCausesNodeAggregationWhereInput {
  AND: [CitizenCausesNodeAggregationWhereInput!]
  NOT: CitizenCausesNodeAggregationWhereInput
  OR: [CitizenCausesNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type CitizenCausesRelationship {
  cursor: String!
  node: Cause!
}

input CitizenCausesRelationshipSubscriptionWhere {
  node: CauseSubscriptionWhere
}

input CitizenCausesUpdateConnectionInput {
  node: CauseUpdateInput
}

input CitizenCausesUpdateFieldInput {
  connect: [CitizenCausesConnectFieldInput!]
  connectOrCreate: [CitizenCausesConnectOrCreateFieldInput!]
  create: [CitizenCausesCreateFieldInput!]
  delete: [CitizenCausesDeleteFieldInput!]
  disconnect: [CitizenCausesDisconnectFieldInput!]
  update: CitizenCausesUpdateConnectionInput
  where: CitizenCausesConnectionWhere
}

type CitizenCitizenAmbassadorsAggregationSelection {
  count: Int!
  node: CitizenCitizenAmbassadorsNodeAggregateSelection
}

type CitizenCitizenAmbassadorsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type CitizenCitizenCreatedByAggregationSelection {
  count: Int!
  node: CitizenCitizenCreatedByNodeAggregateSelection
}

type CitizenCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenConnectInput {
  ambassadors: [EntityAmbassadorsConnectFieldInput!]
  assets: [EntityAssetsConnectFieldInput!]
  born: CitizenBornConnectFieldInput
  causes: [CitizenCausesConnectFieldInput!]
  createdBy: CitizenCreatedByConnectFieldInput
  goods: [EntityGoodsConnectFieldInput!]
  transactions: [EntityTransactionsConnectFieldInput!]
}

input CitizenConnectOrCreateInput {
  ambassadors: [EntityAmbassadorsConnectOrCreateFieldInput!]
  assets: [EntityAssetsConnectOrCreateFieldInput!]
  causes: [CitizenCausesConnectOrCreateFieldInput!]
  createdBy: CitizenCreatedByConnectOrCreateFieldInput
  goods: [EntityGoodsConnectOrCreateFieldInput!]
  transactions: [EntityTransactionsConnectOrCreateFieldInput!]
}

input CitizenConnectOrCreateWhere {
  node: CitizenUniqueWhere!
}

input CitizenConnectWhere {
  node: CitizenWhere!
}

type CitizenConnectedRelationships {
  ambassadors: CitizenAmbassadorsConnectedRelationship
  assets: CitizenAssetsConnectedRelationship
  born: CitizenBornConnectedRelationship
  causes: CitizenCausesConnectedRelationship
  createdBy: CitizenCreatedByConnectedRelationship
  goods: CitizenGoodsConnectedRelationship
  transactions: CitizenTransactionsConnectedRelationship
}

input CitizenCreateInput {
  ambassadors: EntityAmbassadorsFieldInput
  assets: EntityAssetsFieldInput
  born: CitizenBornFieldInput
  causes: CitizenCausesFieldInput
  createdBy: CitizenCreatedByFieldInput
  email: String
  geoLocation: PointInput
  goods: EntityGoodsFieldInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  phoneNumber: String!
  roles: [String!]
  taxNo: String!
  transactions: EntityTransactionsFieldInput
}

input CitizenCreatedByAggregateInput {
  AND: [CitizenCreatedByAggregateInput!]
  NOT: CitizenCreatedByAggregateInput
  OR: [CitizenCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenCreatedByNodeAggregationWhereInput
}

input CitizenCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input CitizenCreatedByConnectOrCreateFieldInput {
  onCreate: CitizenCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input CitizenCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type CitizenCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type CitizenCreatedByConnection {
  edges: [CitizenCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CitizenCreatedByConnectionSort {
  node: CitizenSort
}

input CitizenCreatedByConnectionWhere {
  AND: [CitizenCreatedByConnectionWhere!]
  NOT: CitizenCreatedByConnectionWhere
  OR: [CitizenCreatedByConnectionWhere!]
  node: CitizenWhere
}

input CitizenCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input CitizenCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: CitizenCreatedByConnectionWhere
}

input CitizenCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: CitizenCreatedByConnectionWhere
}

input CitizenCreatedByFieldInput {
  connect: CitizenCreatedByConnectFieldInput
  connectOrCreate: CitizenCreatedByConnectOrCreateFieldInput
  create: CitizenCreatedByCreateFieldInput
}

input CitizenCreatedByNodeAggregationWhereInput {
  AND: [CitizenCreatedByNodeAggregationWhereInput!]
  NOT: CitizenCreatedByNodeAggregationWhereInput
  OR: [CitizenCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type CitizenCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input CitizenCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input CitizenCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input CitizenCreatedByUpdateFieldInput {
  connect: CitizenCreatedByConnectFieldInput
  connectOrCreate: CitizenCreatedByConnectOrCreateFieldInput
  create: CitizenCreatedByCreateFieldInput
  delete: CitizenCreatedByDeleteFieldInput
  disconnect: CitizenCreatedByDisconnectFieldInput
  update: CitizenCreatedByUpdateConnectionInput
  where: CitizenCreatedByConnectionWhere
}

type CitizenCreatedEvent {
  createdCitizen: CitizenEventPayload!
  event: EventType!
  timestamp: Float!
}

input CitizenDeleteInput {
  ambassadors: [EntityAmbassadorsDeleteFieldInput!]
  assets: [EntityAssetsDeleteFieldInput!]
  born: CitizenBornDeleteFieldInput
  causes: [CitizenCausesDeleteFieldInput!]
  createdBy: CitizenCreatedByDeleteFieldInput
  goods: [EntityGoodsDeleteFieldInput!]
  transactions: [EntityTransactionsDeleteFieldInput!]
}

type CitizenDeletedEvent {
  deletedCitizen: CitizenEventPayload!
  event: EventType!
  timestamp: Float!
}

input CitizenDisconnectInput {
  ambassadors: [EntityAmbassadorsDisconnectFieldInput!]
  assets: [EntityAssetsDisconnectFieldInput!]
  born: CitizenBornDisconnectFieldInput
  causes: [CitizenCausesDisconnectFieldInput!]
  createdBy: CitizenCreatedByDisconnectFieldInput
  goods: [EntityGoodsDisconnectFieldInput!]
  transactions: [EntityTransactionsDisconnectFieldInput!]
}

type CitizenEdge {
  cursor: String!
  node: Citizen!
}

type CitizenEventPayload implements EntityEventPayload {
  ambassadors: [Citizen!]!
  ambassadorsConnection: EntityAmbassadorsConnection!
  assets: [Asset!]!
  assetsConnection: EntityAssetsConnection!
  createdAt: DateTime!
  email: String
  geoLocation: Point
  goods: [Good!]!
  goodsConnection: EntityGoodsConnection!
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  phoneNumber: String!
  roles: [String!]
  taxNo: String!
  transactions: [Transaction!]!
  transactionsConnection: EntityTransactionsConnection!
  updatedAt: DateTime!
}

type CitizenGoodGoodsAggregationSelection {
  count: Int!
  node: CitizenGoodGoodsNodeAggregateSelection
}

type CitizenGoodGoodsNodeAggregateSelection {
  barCode: StringAggregateSelectionNullable!
  code: StringAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenGoodsAggregateInput {
  AND: [CitizenGoodsAggregateInput!]
  NOT: CitizenGoodsAggregateInput
  OR: [CitizenGoodsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenGoodsNodeAggregationWhereInput
}

type CitizenGoodsConnectedRelationship {
  node: GoodEventPayload!
}

input CitizenGoodsNodeAggregationWhereInput {
  AND: [CitizenGoodsNodeAggregationWhereInput!]
  NOT: CitizenGoodsNodeAggregationWhereInput
  OR: [CitizenGoodsNodeAggregationWhereInput!]
  barCode_AVERAGE_LENGTH_EQUAL: Float
  barCode_AVERAGE_LENGTH_GT: Float
  barCode_AVERAGE_LENGTH_GTE: Float
  barCode_AVERAGE_LENGTH_LT: Float
  barCode_AVERAGE_LENGTH_LTE: Float
  barCode_LONGEST_LENGTH_EQUAL: Int
  barCode_LONGEST_LENGTH_GT: Int
  barCode_LONGEST_LENGTH_GTE: Int
  barCode_LONGEST_LENGTH_LT: Int
  barCode_LONGEST_LENGTH_LTE: Int
  barCode_SHORTEST_LENGTH_EQUAL: Int
  barCode_SHORTEST_LENGTH_GT: Int
  barCode_SHORTEST_LENGTH_GTE: Int
  barCode_SHORTEST_LENGTH_LT: Int
  barCode_SHORTEST_LENGTH_LTE: Int
  code_AVERAGE_LENGTH_EQUAL: Float
  code_AVERAGE_LENGTH_GT: Float
  code_AVERAGE_LENGTH_GTE: Float
  code_AVERAGE_LENGTH_LT: Float
  code_AVERAGE_LENGTH_LTE: Float
  code_LONGEST_LENGTH_EQUAL: Int
  code_LONGEST_LENGTH_GT: Int
  code_LONGEST_LENGTH_GTE: Int
  code_LONGEST_LENGTH_LT: Int
  code_LONGEST_LENGTH_LTE: Int
  code_SHORTEST_LENGTH_EQUAL: Int
  code_SHORTEST_LENGTH_GT: Int
  code_SHORTEST_LENGTH_GTE: Int
  code_SHORTEST_LENGTH_LT: Int
  code_SHORTEST_LENGTH_LTE: Int
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CitizenGoodsRelationshipSubscriptionWhere {
  node: GoodSubscriptionWhere
}

input CitizenOnCreateInput {
  email: String
  geoLocation: PointInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  phoneNumber: String!
  roles: [String!]
  taxNo: String!
}

input CitizenOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CitizenSort objects to sort Citizens by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CitizenSort!]
}

input CitizenRelationInput {
  ambassadors: [EntityAmbassadorsCreateFieldInput!]
  assets: [EntityAssetsCreateFieldInput!]
  born: CitizenBornCreateFieldInput
  causes: [CitizenCausesCreateFieldInput!]
  createdBy: CitizenCreatedByCreateFieldInput
  goods: [EntityGoodsCreateFieldInput!]
  transactions: [EntityTransactionsCreateFieldInput!]
}

type CitizenRelationshipCreatedEvent {
  citizen: CitizenEventPayload!
  createdRelationship: CitizenConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input CitizenRelationshipCreatedSubscriptionWhere {
  citizen: CitizenSubscriptionWhere
  createdRelationship: CitizenRelationshipsSubscriptionWhere
}

type CitizenRelationshipDeletedEvent {
  citizen: CitizenEventPayload!
  deletedRelationship: CitizenConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
}

input CitizenRelationshipDeletedSubscriptionWhere {
  citizen: CitizenSubscriptionWhere
  deletedRelationship: CitizenRelationshipsSubscriptionWhere
}

input CitizenRelationshipsSubscriptionWhere {
  ambassadors: CitizenAmbassadorsRelationshipSubscriptionWhere
  assets: CitizenAssetsRelationshipSubscriptionWhere
  born: CitizenBornRelationshipSubscriptionWhere
  causes: CitizenCausesRelationshipSubscriptionWhere
  createdBy: CitizenCreatedByRelationshipSubscriptionWhere
  goods: CitizenGoodsRelationshipSubscriptionWhere
  transactions: CitizenTransactionsRelationshipSubscriptionWhere
}

"""
Fields to sort Citizens by. The order in which sorts are applied is not guaranteed when specifying many fields in one CitizenSort object.
"""
input CitizenSort {
  createdAt: SortDirection
  email: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  name: SortDirection
  phoneNumber: SortDirection
  taxNo: SortDirection
  updatedAt: SortDirection
}

type CitizenSourceBornAggregationSelection {
  count: Int!
  node: CitizenSourceBornNodeAggregateSelection
}

type CitizenSourceBornNodeAggregateSelection {
  id: StringAggregateSelectionNonNullable!
}

input CitizenSubscriptionWhere {
  AND: [CitizenSubscriptionWhere!]
  NOT: CitizenSubscriptionWhere
  OR: [CitizenSubscriptionWhere!]
  createdAt: DateTime
  createdAt_IN: [DateTime]
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
  phoneNumber: String
  phoneNumber_CONTAINS: String
  phoneNumber_ENDS_WITH: String
  phoneNumber_IN: [String]
  phoneNumber_STARTS_WITH: String
  roles: [String!]
  roles_INCLUDES: String
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String]
  taxNo_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

type CitizenTransactionTransactionsAggregationSelection {
  count: Int!
  node: CitizenTransactionTransactionsNodeAggregateSelection
}

type CitizenTransactionTransactionsNodeAggregateSelection {
  amount: FloatAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input CitizenTransactionsAggregateInput {
  AND: [CitizenTransactionsAggregateInput!]
  NOT: CitizenTransactionsAggregateInput
  OR: [CitizenTransactionsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CitizenTransactionsNodeAggregationWhereInput
}

type CitizenTransactionsConnectedRelationship {
  node: TransactionEventPayload!
}

input CitizenTransactionsNodeAggregationWhereInput {
  AND: [CitizenTransactionsNodeAggregationWhereInput!]
  NOT: CitizenTransactionsNodeAggregationWhereInput
  OR: [CitizenTransactionsNodeAggregationWhereInput!]
  amount_AVERAGE_EQUAL: Float
  amount_AVERAGE_GT: Float
  amount_AVERAGE_GTE: Float
  amount_AVERAGE_LT: Float
  amount_AVERAGE_LTE: Float
  amount_MAX_EQUAL: Float
  amount_MAX_GT: Float
  amount_MAX_GTE: Float
  amount_MAX_LT: Float
  amount_MAX_LTE: Float
  amount_MIN_EQUAL: Float
  amount_MIN_GT: Float
  amount_MIN_GTE: Float
  amount_MIN_LT: Float
  amount_MIN_LTE: Float
  amount_SUM_EQUAL: Float
  amount_SUM_GT: Float
  amount_SUM_GTE: Float
  amount_SUM_LT: Float
  amount_SUM_LTE: Float
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input CitizenTransactionsRelationshipSubscriptionWhere {
  node: TransactionSubscriptionWhere
}

input CitizenUniqueWhere {
  email: String
  id: ID
  phoneNumber: String
  taxNo: String
}

input CitizenUpdateInput {
  ambassadors: [EntityAmbassadorsUpdateFieldInput!]
  assets: [EntityAssetsUpdateFieldInput!]
  born: CitizenBornUpdateFieldInput
  causes: [CitizenCausesUpdateFieldInput!]
  createdBy: CitizenCreatedByUpdateFieldInput
  email: String
  geoLocation: PointInput
  goods: [EntityGoodsUpdateFieldInput!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String
  phoneNumber: String
  roles: [String!]
  roles_POP: Int
  roles_PUSH: [String!]
  taxNo: String
  transactions: [EntityTransactionsUpdateFieldInput!]
}

type CitizenUpdatedEvent {
  event: EventType!
  previousState: CitizenEventPayload!
  timestamp: Float!
  updatedCitizen: CitizenEventPayload!
}

input CitizenWhere {
  AND: [CitizenWhere!]
  NOT: CitizenWhere
  OR: [CitizenWhere!]
  ambassadorsAggregate: CitizenAmbassadorsAggregateInput
  ambassadorsConnection_ALL: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_NONE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SINGLE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SOME: EntityAmbassadorsConnectionWhere

  """Return Citizens where all of the related Citizens match this filter"""
  ambassadors_ALL: CitizenWhere

  """Return Citizens where none of the related Citizens match this filter"""
  ambassadors_NONE: CitizenWhere

  """Return Citizens where one of the related Citizens match this filter"""
  ambassadors_SINGLE: CitizenWhere

  """Return Citizens where some of the related Citizens match this filter"""
  ambassadors_SOME: CitizenWhere
  assetsAggregate: CitizenAssetsAggregateInput
  assetsConnection_ALL: EntityAssetsConnectionWhere
  assetsConnection_NONE: EntityAssetsConnectionWhere
  assetsConnection_SINGLE: EntityAssetsConnectionWhere
  assetsConnection_SOME: EntityAssetsConnectionWhere

  """Return Citizens where all of the related Assets match this filter"""
  assets_ALL: AssetWhere

  """Return Citizens where none of the related Assets match this filter"""
  assets_NONE: AssetWhere

  """Return Citizens where one of the related Assets match this filter"""
  assets_SINGLE: AssetWhere

  """Return Citizens where some of the related Assets match this filter"""
  assets_SOME: AssetWhere
  bornAggregate: CitizenBornAggregateInput
  bornConnection: CitizenBornConnectionWhere
  causesAggregate: CitizenCausesAggregateInput
  causesConnection_ALL: CitizenCausesConnectionWhere
  causesConnection_NONE: CitizenCausesConnectionWhere
  causesConnection_SINGLE: CitizenCausesConnectionWhere
  causesConnection_SOME: CitizenCausesConnectionWhere

  """Return Citizens where all of the related Causes match this filter"""
  causes_ALL: CauseWhere

  """Return Citizens where none of the related Causes match this filter"""
  causes_NONE: CauseWhere

  """Return Citizens where one of the related Causes match this filter"""
  causes_SINGLE: CauseWhere

  """Return Citizens where some of the related Causes match this filter"""
  causes_SOME: CauseWhere
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: CitizenCreatedByAggregateInput
  createdByConnection: CitizenCreatedByConnectionWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  goodsAggregate: CitizenGoodsAggregateInput
  goodsConnection_ALL: EntityGoodsConnectionWhere
  goodsConnection_NONE: EntityGoodsConnectionWhere
  goodsConnection_SINGLE: EntityGoodsConnectionWhere
  goodsConnection_SOME: EntityGoodsConnectionWhere

  """Return Citizens where all of the related Goods match this filter"""
  goods_ALL: GoodWhere

  """Return Citizens where none of the related Goods match this filter"""
  goods_NONE: GoodWhere

  """Return Citizens where one of the related Goods match this filter"""
  goods_SINGLE: GoodWhere

  """Return Citizens where some of the related Goods match this filter"""
  goods_SOME: GoodWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  phoneNumber: String
  phoneNumber_CONTAINS: String
  phoneNumber_ENDS_WITH: String
  phoneNumber_IN: [String!]
  phoneNumber_STARTS_WITH: String
  roles: [String!]
  roles_INCLUDES: String
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String!]
  taxNo_STARTS_WITH: String
  transactionsAggregate: CitizenTransactionsAggregateInput
  transactionsConnection_ALL: EntityTransactionsConnectionWhere
  transactionsConnection_NONE: EntityTransactionsConnectionWhere
  transactionsConnection_SINGLE: EntityTransactionsConnectionWhere
  transactionsConnection_SOME: EntityTransactionsConnectionWhere

  """
  Return Citizens where all of the related Transactions match this filter
  """
  transactions_ALL: TransactionWhere

  """
  Return Citizens where none of the related Transactions match this filter
  """
  transactions_NONE: TransactionWhere

  """
  Return Citizens where one of the related Transactions match this filter
  """
  transactions_SINGLE: TransactionWhere

  """
  Return Citizens where some of the related Transactions match this filter
  """
  transactions_SOME: TransactionWhere
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type CitizensConnection {
  edges: [CitizenEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateAssetsMutationResponse {
  assets: [Asset!]!
  info: CreateInfo!
}

type CreateCausesMutationResponse {
  causes: [Cause!]!
  info: CreateInfo!
}

type CreateCitizensMutationResponse {
  citizens: [Citizen!]!
  info: CreateInfo!
}

type CreateGoodsMutationResponse {
  goods: [Good!]!
  info: CreateInfo!
}

type CreateInfo {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateOrganizationsMutationResponse {
  info: CreateInfo!
  organizations: [Organization!]!
}

type CreateSourcesMutationResponse {
  info: CreateInfo!
  sources: [Source!]!
}

type CreateTransactionsMutationResponse {
  info: CreateInfo!
  transactions: [Transaction!]!
}

enum CurrencyType {
  EUR
  USD
}

"""A date, represented as a 'yyyy-mm-dd' string"""
scalar Date

"""A date and time, represented as an ISO-8601 string"""
scalar DateTime

type DateTimeAggregateSelectionNonNullable {
  max: DateTime!
  min: DateTime!
}

type DeleteInfo {
  bookmark: String
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

interface Entity {
  ambassadors(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  ambassadorsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAmbassadorsConnectionSort!], where: EntityAmbassadorsConnectionWhere): EntityAmbassadorsConnection!
  assets(directed: Boolean = true, options: AssetOptions, where: AssetWhere): [Asset!]!
  assetsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAssetsConnectionSort!], where: EntityAssetsConnectionWhere): EntityAssetsConnection!
  email: String
  geoLocation: Point
  goods(directed: Boolean = true, options: GoodOptions, where: GoodWhere): [Good!]!
  goodsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityGoodsConnectionSort!], where: EntityGoodsConnectionWhere): EntityGoodsConnection!
  id: ID!
  name: String!
  transactions(directed: Boolean = true, options: TransactionOptions, where: TransactionWhere): [Transaction!]!
  transactionsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityTransactionsConnectionSort!], where: EntityTransactionsConnectionWhere): EntityTransactionsConnection!
}

input EntityAmbassadorsAggregateInput {
  AND: [EntityAmbassadorsAggregateInput!]
  NOT: EntityAmbassadorsAggregateInput
  OR: [EntityAmbassadorsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EntityAmbassadorsNodeAggregationWhereInput
}

input EntityAmbassadorsConnectFieldInput {
  connect: [CitizenConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input EntityAmbassadorsConnectOrCreateFieldInput {
  onCreate: EntityAmbassadorsConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input EntityAmbassadorsConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type EntityAmbassadorsConnection {
  edges: [EntityAmbassadorsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EntityAmbassadorsConnectionSort {
  node: CitizenSort
}

input EntityAmbassadorsConnectionWhere {
  AND: [EntityAmbassadorsConnectionWhere!]
  NOT: EntityAmbassadorsConnectionWhere
  OR: [EntityAmbassadorsConnectionWhere!]
  node: CitizenWhere
}

input EntityAmbassadorsCreateFieldInput {
  node: CitizenCreateInput!
}

input EntityAmbassadorsDeleteFieldInput {
  delete: CitizenDeleteInput
  where: EntityAmbassadorsConnectionWhere
}

input EntityAmbassadorsDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: EntityAmbassadorsConnectionWhere
}

input EntityAmbassadorsFieldInput {
  connect: [EntityAmbassadorsConnectFieldInput!]
  connectOrCreate: [EntityAmbassadorsConnectOrCreateFieldInput!]
  create: [EntityAmbassadorsCreateFieldInput!]
}

input EntityAmbassadorsNodeAggregationWhereInput {
  AND: [EntityAmbassadorsNodeAggregationWhereInput!]
  NOT: EntityAmbassadorsNodeAggregationWhereInput
  OR: [EntityAmbassadorsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type EntityAmbassadorsRelationship {
  cursor: String!
  node: Citizen!
}

input EntityAmbassadorsUpdateConnectionInput {
  node: CitizenUpdateInput
}

input EntityAmbassadorsUpdateFieldInput {
  connect: [EntityAmbassadorsConnectFieldInput!]
  connectOrCreate: [EntityAmbassadorsConnectOrCreateFieldInput!]
  create: [EntityAmbassadorsCreateFieldInput!]
  delete: [EntityAmbassadorsDeleteFieldInput!]
  disconnect: [EntityAmbassadorsDisconnectFieldInput!]
  update: EntityAmbassadorsUpdateConnectionInput
  where: EntityAmbassadorsConnectionWhere
}

input EntityAssetsAggregateInput {
  AND: [EntityAssetsAggregateInput!]
  NOT: EntityAssetsAggregateInput
  OR: [EntityAssetsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EntityAssetsNodeAggregationWhereInput
}

input EntityAssetsConnectFieldInput {
  connect: [AssetConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: AssetConnectWhere
}

input EntityAssetsConnectOrCreateFieldInput {
  onCreate: EntityAssetsConnectOrCreateFieldInputOnCreate!
  where: AssetConnectOrCreateWhere!
}

input EntityAssetsConnectOrCreateFieldInputOnCreate {
  node: AssetOnCreateInput!
}

type EntityAssetsConnection {
  edges: [EntityAssetsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EntityAssetsConnectionSort {
  node: AssetSort
}

input EntityAssetsConnectionWhere {
  AND: [EntityAssetsConnectionWhere!]
  NOT: EntityAssetsConnectionWhere
  OR: [EntityAssetsConnectionWhere!]
  node: AssetWhere
}

input EntityAssetsCreateFieldInput {
  node: AssetCreateInput!
}

input EntityAssetsDeleteFieldInput {
  delete: AssetDeleteInput
  where: EntityAssetsConnectionWhere
}

input EntityAssetsDisconnectFieldInput {
  disconnect: AssetDisconnectInput
  where: EntityAssetsConnectionWhere
}

input EntityAssetsFieldInput {
  connect: [EntityAssetsConnectFieldInput!]
  connectOrCreate: [EntityAssetsConnectOrCreateFieldInput!]
  create: [EntityAssetsCreateFieldInput!]
}

input EntityAssetsNodeAggregationWhereInput {
  AND: [EntityAssetsNodeAggregationWhereInput!]
  NOT: EntityAssetsNodeAggregationWhereInput
  OR: [EntityAssetsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type EntityAssetsRelationship {
  cursor: String!
  node: Asset!
}

input EntityAssetsUpdateConnectionInput {
  node: AssetUpdateInput
}

input EntityAssetsUpdateFieldInput {
  connect: [EntityAssetsConnectFieldInput!]
  connectOrCreate: [EntityAssetsConnectOrCreateFieldInput!]
  create: [EntityAssetsCreateFieldInput!]
  delete: [EntityAssetsDeleteFieldInput!]
  disconnect: [EntityAssetsDisconnectFieldInput!]
  update: EntityAssetsUpdateConnectionInput
  where: EntityAssetsConnectionWhere
}

input EntityConnectInput {
  _on: EntityImplementationsConnectInput
  ambassadors: [EntityAmbassadorsConnectFieldInput!]
  assets: [EntityAssetsConnectFieldInput!]
  goods: [EntityGoodsConnectFieldInput!]
  transactions: [EntityTransactionsConnectFieldInput!]
}

input EntityConnectWhere {
  node: EntityWhere!
}

input EntityCreateInput {
  Cause: CauseCreateInput
  Citizen: CitizenCreateInput
  Organization: OrganizationCreateInput
}

input EntityDeleteInput {
  _on: EntityImplementationsDeleteInput
  ambassadors: [EntityAmbassadorsDeleteFieldInput!]
  assets: [EntityAssetsDeleteFieldInput!]
  goods: [EntityGoodsDeleteFieldInput!]
  transactions: [EntityTransactionsDeleteFieldInput!]
}

input EntityDisconnectInput {
  _on: EntityImplementationsDisconnectInput
  ambassadors: [EntityAmbassadorsDisconnectFieldInput!]
  assets: [EntityAssetsDisconnectFieldInput!]
  goods: [EntityGoodsDisconnectFieldInput!]
  transactions: [EntityTransactionsDisconnectFieldInput!]
}

interface EntityEventPayload {
  ambassadors: [Citizen!]!
  ambassadorsConnection: EntityAmbassadorsConnection!
  assets: [Asset!]!
  assetsConnection: EntityAssetsConnection!
  email: String
  geoLocation: Point
  goods: [Good!]!
  goodsConnection: EntityGoodsConnection!
  id: ID!
  name: String!
  transactions: [Transaction!]!
  transactionsConnection: EntityTransactionsConnection!
}

input EntityGoodsAggregateInput {
  AND: [EntityGoodsAggregateInput!]
  NOT: EntityGoodsAggregateInput
  OR: [EntityGoodsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EntityGoodsNodeAggregationWhereInput
}

input EntityGoodsConnectFieldInput {
  connect: [GoodConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: GoodConnectWhere
}

input EntityGoodsConnectOrCreateFieldInput {
  onCreate: EntityGoodsConnectOrCreateFieldInputOnCreate!
  where: GoodConnectOrCreateWhere!
}

input EntityGoodsConnectOrCreateFieldInputOnCreate {
  node: GoodOnCreateInput!
}

type EntityGoodsConnection {
  edges: [EntityGoodsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EntityGoodsConnectionSort {
  node: GoodSort
}

input EntityGoodsConnectionWhere {
  AND: [EntityGoodsConnectionWhere!]
  NOT: EntityGoodsConnectionWhere
  OR: [EntityGoodsConnectionWhere!]
  node: GoodWhere
}

input EntityGoodsCreateFieldInput {
  node: GoodCreateInput!
}

input EntityGoodsDeleteFieldInput {
  delete: GoodDeleteInput
  where: EntityGoodsConnectionWhere
}

input EntityGoodsDisconnectFieldInput {
  disconnect: GoodDisconnectInput
  where: EntityGoodsConnectionWhere
}

input EntityGoodsFieldInput {
  connect: [EntityGoodsConnectFieldInput!]
  connectOrCreate: [EntityGoodsConnectOrCreateFieldInput!]
  create: [EntityGoodsCreateFieldInput!]
}

input EntityGoodsNodeAggregationWhereInput {
  AND: [EntityGoodsNodeAggregationWhereInput!]
  NOT: EntityGoodsNodeAggregationWhereInput
  OR: [EntityGoodsNodeAggregationWhereInput!]
  barCode_AVERAGE_LENGTH_EQUAL: Float
  barCode_AVERAGE_LENGTH_GT: Float
  barCode_AVERAGE_LENGTH_GTE: Float
  barCode_AVERAGE_LENGTH_LT: Float
  barCode_AVERAGE_LENGTH_LTE: Float
  barCode_LONGEST_LENGTH_EQUAL: Int
  barCode_LONGEST_LENGTH_GT: Int
  barCode_LONGEST_LENGTH_GTE: Int
  barCode_LONGEST_LENGTH_LT: Int
  barCode_LONGEST_LENGTH_LTE: Int
  barCode_SHORTEST_LENGTH_EQUAL: Int
  barCode_SHORTEST_LENGTH_GT: Int
  barCode_SHORTEST_LENGTH_GTE: Int
  barCode_SHORTEST_LENGTH_LT: Int
  barCode_SHORTEST_LENGTH_LTE: Int
  code_AVERAGE_LENGTH_EQUAL: Float
  code_AVERAGE_LENGTH_GT: Float
  code_AVERAGE_LENGTH_GTE: Float
  code_AVERAGE_LENGTH_LT: Float
  code_AVERAGE_LENGTH_LTE: Float
  code_LONGEST_LENGTH_EQUAL: Int
  code_LONGEST_LENGTH_GT: Int
  code_LONGEST_LENGTH_GTE: Int
  code_LONGEST_LENGTH_LT: Int
  code_LONGEST_LENGTH_LTE: Int
  code_SHORTEST_LENGTH_EQUAL: Int
  code_SHORTEST_LENGTH_GT: Int
  code_SHORTEST_LENGTH_GTE: Int
  code_SHORTEST_LENGTH_LT: Int
  code_SHORTEST_LENGTH_LTE: Int
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type EntityGoodsRelationship {
  cursor: String!
  node: Good!
}

input EntityGoodsUpdateConnectionInput {
  node: GoodUpdateInput
}

input EntityGoodsUpdateFieldInput {
  connect: [EntityGoodsConnectFieldInput!]
  connectOrCreate: [EntityGoodsConnectOrCreateFieldInput!]
  create: [EntityGoodsCreateFieldInput!]
  delete: [EntityGoodsDeleteFieldInput!]
  disconnect: [EntityGoodsDisconnectFieldInput!]
  update: EntityGoodsUpdateConnectionInput
  where: EntityGoodsConnectionWhere
}

input EntityImplementationsConnectInput {
  Cause: [CauseConnectInput!]
  Citizen: [CitizenConnectInput!]
  Organization: [OrganizationConnectInput!]
}

input EntityImplementationsDeleteInput {
  Cause: [CauseDeleteInput!]
  Citizen: [CitizenDeleteInput!]
  Organization: [OrganizationDeleteInput!]
}

input EntityImplementationsDisconnectInput {
  Cause: [CauseDisconnectInput!]
  Citizen: [CitizenDisconnectInput!]
  Organization: [OrganizationDisconnectInput!]
}

input EntityImplementationsSubscriptionWhere {
  Cause: CauseSubscriptionWhere
  Citizen: CitizenSubscriptionWhere
  Organization: OrganizationSubscriptionWhere
}

input EntityImplementationsUpdateInput {
  Cause: CauseUpdateInput
  Citizen: CitizenUpdateInput
  Organization: OrganizationUpdateInput
}

input EntityImplementationsWhere {
  Cause: CauseWhere
  Citizen: CitizenWhere
  Organization: OrganizationWhere
}

input EntityOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EntitySort objects to sort Entities by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EntitySort]
}

"""
Fields to sort Entities by. The order in which sorts are applied is not guaranteed when specifying many fields in one EntitySort object.
"""
input EntitySort {
  email: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  name: SortDirection
}

input EntitySubscriptionWhere {
  AND: [EntitySubscriptionWhere!]
  NOT: EntitySubscriptionWhere
  OR: [EntitySubscriptionWhere!]
  _on: EntityImplementationsSubscriptionWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
}

input EntityTransactionsAggregateInput {
  AND: [EntityTransactionsAggregateInput!]
  NOT: EntityTransactionsAggregateInput
  OR: [EntityTransactionsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EntityTransactionsNodeAggregationWhereInput
}

input EntityTransactionsConnectFieldInput {
  connect: [TransactionConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: TransactionConnectWhere
}

input EntityTransactionsConnectOrCreateFieldInput {
  onCreate: EntityTransactionsConnectOrCreateFieldInputOnCreate!
  where: TransactionConnectOrCreateWhere!
}

input EntityTransactionsConnectOrCreateFieldInputOnCreate {
  node: TransactionOnCreateInput!
}

type EntityTransactionsConnection {
  edges: [EntityTransactionsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EntityTransactionsConnectionSort {
  node: TransactionSort
}

input EntityTransactionsConnectionWhere {
  AND: [EntityTransactionsConnectionWhere!]
  NOT: EntityTransactionsConnectionWhere
  OR: [EntityTransactionsConnectionWhere!]
  node: TransactionWhere
}

input EntityTransactionsCreateFieldInput {
  node: TransactionCreateInput!
}

input EntityTransactionsDeleteFieldInput {
  delete: TransactionDeleteInput
  where: EntityTransactionsConnectionWhere
}

input EntityTransactionsDisconnectFieldInput {
  disconnect: TransactionDisconnectInput
  where: EntityTransactionsConnectionWhere
}

input EntityTransactionsFieldInput {
  connect: [EntityTransactionsConnectFieldInput!]
  connectOrCreate: [EntityTransactionsConnectOrCreateFieldInput!]
  create: [EntityTransactionsCreateFieldInput!]
}

input EntityTransactionsNodeAggregationWhereInput {
  AND: [EntityTransactionsNodeAggregationWhereInput!]
  NOT: EntityTransactionsNodeAggregationWhereInput
  OR: [EntityTransactionsNodeAggregationWhereInput!]
  amount_AVERAGE_EQUAL: Float
  amount_AVERAGE_GT: Float
  amount_AVERAGE_GTE: Float
  amount_AVERAGE_LT: Float
  amount_AVERAGE_LTE: Float
  amount_MAX_EQUAL: Float
  amount_MAX_GT: Float
  amount_MAX_GTE: Float
  amount_MAX_LT: Float
  amount_MAX_LTE: Float
  amount_MIN_EQUAL: Float
  amount_MIN_GT: Float
  amount_MIN_GTE: Float
  amount_MIN_LT: Float
  amount_MIN_LTE: Float
  amount_SUM_EQUAL: Float
  amount_SUM_GT: Float
  amount_SUM_GTE: Float
  amount_SUM_LT: Float
  amount_SUM_LTE: Float
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type EntityTransactionsRelationship {
  cursor: String!
  node: Transaction!
}

input EntityTransactionsUpdateConnectionInput {
  node: TransactionUpdateInput
}

input EntityTransactionsUpdateFieldInput {
  connect: [EntityTransactionsConnectFieldInput!]
  connectOrCreate: [EntityTransactionsConnectOrCreateFieldInput!]
  create: [EntityTransactionsCreateFieldInput!]
  delete: [EntityTransactionsDeleteFieldInput!]
  disconnect: [EntityTransactionsDisconnectFieldInput!]
  update: EntityTransactionsUpdateConnectionInput
  where: EntityTransactionsConnectionWhere
}

input EntityUpdateInput {
  _on: EntityImplementationsUpdateInput
  ambassadors: [EntityAmbassadorsUpdateFieldInput!]
  assets: [EntityAssetsUpdateFieldInput!]
  email: String
  geoLocation: PointInput
  goods: [EntityGoodsUpdateFieldInput!]
  name: String
  transactions: [EntityTransactionsUpdateFieldInput!]
}

input EntityWhere {
  _on: EntityImplementationsWhere
  ambassadorsAggregate: EntityAmbassadorsAggregateInput
  ambassadorsConnection_ALL: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_NONE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SINGLE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SOME: EntityAmbassadorsConnectionWhere

  """Return Entities where all of the related Citizens match this filter"""
  ambassadors_ALL: CitizenWhere

  """Return Entities where none of the related Citizens match this filter"""
  ambassadors_NONE: CitizenWhere

  """Return Entities where one of the related Citizens match this filter"""
  ambassadors_SINGLE: CitizenWhere

  """Return Entities where some of the related Citizens match this filter"""
  ambassadors_SOME: CitizenWhere
  assetsAggregate: EntityAssetsAggregateInput
  assetsConnection_ALL: EntityAssetsConnectionWhere
  assetsConnection_NONE: EntityAssetsConnectionWhere
  assetsConnection_SINGLE: EntityAssetsConnectionWhere
  assetsConnection_SOME: EntityAssetsConnectionWhere

  """Return Entities where all of the related Assets match this filter"""
  assets_ALL: AssetWhere

  """Return Entities where none of the related Assets match this filter"""
  assets_NONE: AssetWhere

  """Return Entities where one of the related Assets match this filter"""
  assets_SINGLE: AssetWhere

  """Return Entities where some of the related Assets match this filter"""
  assets_SOME: AssetWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  goodsAggregate: EntityGoodsAggregateInput
  goodsConnection_ALL: EntityGoodsConnectionWhere
  goodsConnection_NONE: EntityGoodsConnectionWhere
  goodsConnection_SINGLE: EntityGoodsConnectionWhere
  goodsConnection_SOME: EntityGoodsConnectionWhere

  """Return Entities where all of the related Goods match this filter"""
  goods_ALL: GoodWhere

  """Return Entities where none of the related Goods match this filter"""
  goods_NONE: GoodWhere

  """Return Entities where one of the related Goods match this filter"""
  goods_SINGLE: GoodWhere

  """Return Entities where some of the related Goods match this filter"""
  goods_SOME: GoodWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  transactionsAggregate: EntityTransactionsAggregateInput
  transactionsConnection_ALL: EntityTransactionsConnectionWhere
  transactionsConnection_NONE: EntityTransactionsConnectionWhere
  transactionsConnection_SINGLE: EntityTransactionsConnectionWhere
  transactionsConnection_SOME: EntityTransactionsConnectionWhere

  """
  Return Entities where all of the related Transactions match this filter
  """
  transactions_ALL: TransactionWhere

  """
  Return Entities where none of the related Transactions match this filter
  """
  transactions_NONE: TransactionWhere

  """
  Return Entities where one of the related Transactions match this filter
  """
  transactions_SINGLE: TransactionWhere

  """
  Return Entities where some of the related Transactions match this filter
  """
  transactions_SOME: TransactionWhere
}

enum EventType {
  CREATE
  CREATE_RELATIONSHIP
  DELETE
  DELETE_RELATIONSHIP
  UPDATE
}

type FloatAggregateSelectionNonNullable {
  average: Float!
  max: Float!
  min: Float!
  sum: Float!
}

union Founder = Citizen | Organization

union FounderEventPayload = CitizenEventPayload | OrganizationEventPayload

input FounderWhere {
  Citizen: CitizenWhere
  Organization: OrganizationWhere
}

type GenericBalance {
  balance: Float!
  credit: Float!
  debit: Float!
}

type Good {
  balance: GenericBalance!
  barCode: String
  code: String!
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): GoodCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [GoodCreatedByConnectionSort!], where: GoodCreatedByConnectionWhere): GoodCreatedByConnection!
  description: String
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  updatedAt: DateTime!
}

type GoodAggregateSelection {
  barCode: StringAggregateSelectionNullable!
  code: StringAggregateSelectionNonNullable!
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type GoodCitizenCreatedByAggregationSelection {
  count: Int!
  node: GoodCitizenCreatedByNodeAggregateSelection
}

type GoodCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input GoodConnectInput {
  createdBy: GoodCreatedByConnectFieldInput
}

input GoodConnectOrCreateInput {
  createdBy: GoodCreatedByConnectOrCreateFieldInput
}

input GoodConnectOrCreateWhere {
  node: GoodUniqueWhere!
}

input GoodConnectWhere {
  node: GoodWhere!
}

type GoodConnectedRelationships {
  createdBy: GoodCreatedByConnectedRelationship
}

input GoodCreateInput {
  barCode: String
  code: String!
  createdBy: GoodCreatedByFieldInput
  description: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
}

input GoodCreatedByAggregateInput {
  AND: [GoodCreatedByAggregateInput!]
  NOT: GoodCreatedByAggregateInput
  OR: [GoodCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: GoodCreatedByNodeAggregationWhereInput
}

input GoodCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input GoodCreatedByConnectOrCreateFieldInput {
  onCreate: GoodCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input GoodCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type GoodCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type GoodCreatedByConnection {
  edges: [GoodCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input GoodCreatedByConnectionSort {
  node: CitizenSort
}

input GoodCreatedByConnectionWhere {
  AND: [GoodCreatedByConnectionWhere!]
  NOT: GoodCreatedByConnectionWhere
  OR: [GoodCreatedByConnectionWhere!]
  node: CitizenWhere
}

input GoodCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input GoodCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: GoodCreatedByConnectionWhere
}

input GoodCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: GoodCreatedByConnectionWhere
}

input GoodCreatedByFieldInput {
  connect: GoodCreatedByConnectFieldInput
  connectOrCreate: GoodCreatedByConnectOrCreateFieldInput
  create: GoodCreatedByCreateFieldInput
}

input GoodCreatedByNodeAggregationWhereInput {
  AND: [GoodCreatedByNodeAggregationWhereInput!]
  NOT: GoodCreatedByNodeAggregationWhereInput
  OR: [GoodCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type GoodCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input GoodCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input GoodCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input GoodCreatedByUpdateFieldInput {
  connect: GoodCreatedByConnectFieldInput
  connectOrCreate: GoodCreatedByConnectOrCreateFieldInput
  create: GoodCreatedByCreateFieldInput
  delete: GoodCreatedByDeleteFieldInput
  disconnect: GoodCreatedByDisconnectFieldInput
  update: GoodCreatedByUpdateConnectionInput
  where: GoodCreatedByConnectionWhere
}

type GoodCreatedEvent {
  createdGood: GoodEventPayload!
  event: EventType!
  timestamp: Float!
}

input GoodDeleteInput {
  createdBy: GoodCreatedByDeleteFieldInput
}

type GoodDeletedEvent {
  deletedGood: GoodEventPayload!
  event: EventType!
  timestamp: Float!
}

input GoodDisconnectInput {
  createdBy: GoodCreatedByDisconnectFieldInput
}

type GoodEdge {
  cursor: String!
  node: Good!
}

type GoodEventPayload {
  barCode: String
  code: String!
  createdAt: DateTime!
  description: String
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  updatedAt: DateTime!
}

type GoodItems {
  good: Good!
  quantity: Int!
}

input GoodOnCreateInput {
  barCode: String
  code: String!
  description: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
}

input GoodOptions {
  limit: Int
  offset: Int

  """
  Specify one or more GoodSort objects to sort Goods by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [GoodSort!]
}

input GoodRelationInput {
  createdBy: GoodCreatedByCreateFieldInput
}

type GoodRelationshipCreatedEvent {
  createdRelationship: GoodConnectedRelationships!
  event: EventType!
  good: GoodEventPayload!
  relationshipFieldName: String!
  timestamp: Float!
}

input GoodRelationshipCreatedSubscriptionWhere {
  createdRelationship: GoodRelationshipsSubscriptionWhere
  good: GoodSubscriptionWhere
}

type GoodRelationshipDeletedEvent {
  deletedRelationship: GoodConnectedRelationships!
  event: EventType!
  good: GoodEventPayload!
  relationshipFieldName: String!
  timestamp: Float!
}

input GoodRelationshipDeletedSubscriptionWhere {
  deletedRelationship: GoodRelationshipsSubscriptionWhere
  good: GoodSubscriptionWhere
}

input GoodRelationshipsSubscriptionWhere {
  createdBy: GoodCreatedByRelationshipSubscriptionWhere
}

"""
Fields to sort Goods by. The order in which sorts are applied is not guaranteed when specifying many fields in one GoodSort object.
"""
input GoodSort {
  barCode: SortDirection
  code: SortDirection
  createdAt: SortDirection
  description: SortDirection
  id: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  name: SortDirection
  updatedAt: SortDirection
}

input GoodSubscriptionWhere {
  AND: [GoodSubscriptionWhere!]
  NOT: GoodSubscriptionWhere
  OR: [GoodSubscriptionWhere!]
  barCode: String
  barCode_CONTAINS: String
  barCode_ENDS_WITH: String
  barCode_IN: [String]
  barCode_STARTS_WITH: String
  code: String
  code_CONTAINS: String
  code_ENDS_WITH: String
  code_IN: [String]
  code_STARTS_WITH: String
  createdAt: DateTime
  createdAt_IN: [DateTime]
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

input GoodUniqueWhere {
  id: ID
}

input GoodUpdateInput {
  barCode: String
  code: String
  createdBy: GoodCreatedByUpdateFieldInput
  description: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String
}

type GoodUpdatedEvent {
  event: EventType!
  previousState: GoodEventPayload!
  timestamp: Float!
  updatedGood: GoodEventPayload!
}

input GoodWhere {
  AND: [GoodWhere!]
  NOT: GoodWhere
  OR: [GoodWhere!]
  barCode: String
  barCode_CONTAINS: String
  barCode_ENDS_WITH: String
  barCode_IN: [String]
  barCode_STARTS_WITH: String
  code: String
  code_CONTAINS: String
  code_ENDS_WITH: String
  code_IN: [String!]
  code_STARTS_WITH: String
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: GoodCreatedByAggregateInput
  createdByConnection: GoodCreatedByConnectionWhere
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type GoodsConnection {
  edges: [GoodEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IDAggregateSelectionNonNullable {
  longest: ID!
  shortest: ID!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createAssets(input: [AssetCreateInput!]!): CreateAssetsMutationResponse!
  createCauses(input: [CauseCreateInput!]!): CreateCausesMutationResponse!
  createCitizens(input: [CitizenCreateInput!]!): CreateCitizensMutationResponse!
  createGoods(input: [GoodCreateInput!]!): CreateGoodsMutationResponse!
  createOrganizations(input: [OrganizationCreateInput!]!): CreateOrganizationsMutationResponse!
  createSources(input: [SourceCreateInput!]!): CreateSourcesMutationResponse!
  createTransactions(input: [TransactionCreateInput!]!): CreateTransactionsMutationResponse!
  deleteAssets(delete: AssetDeleteInput, where: AssetWhere): DeleteInfo!
  deleteCauses(delete: CauseDeleteInput, where: CauseWhere): DeleteInfo!
  deleteCitizens(delete: CitizenDeleteInput, where: CitizenWhere): DeleteInfo!
  deleteGoods(delete: GoodDeleteInput, where: GoodWhere): DeleteInfo!
  deleteOrganizations(delete: OrganizationDeleteInput, where: OrganizationWhere): DeleteInfo!
  deleteSources(where: SourceWhere): DeleteInfo!
  deleteTransactions(delete: TransactionDeleteInput, where: TransactionWhere): DeleteInfo!
  updateAssets(connect: AssetConnectInput, connectOrCreate: AssetConnectOrCreateInput, create: AssetRelationInput, delete: AssetDeleteInput, disconnect: AssetDisconnectInput, update: AssetUpdateInput, where: AssetWhere): UpdateAssetsMutationResponse!
  updateCauses(connect: CauseConnectInput, connectOrCreate: CauseConnectOrCreateInput, create: CauseRelationInput, delete: CauseDeleteInput, disconnect: CauseDisconnectInput, update: CauseUpdateInput, where: CauseWhere): UpdateCausesMutationResponse!
  updateCitizens(connect: CitizenConnectInput, connectOrCreate: CitizenConnectOrCreateInput, create: CitizenRelationInput, delete: CitizenDeleteInput, disconnect: CitizenDisconnectInput, update: CitizenUpdateInput, where: CitizenWhere): UpdateCitizensMutationResponse!
  updateGoods(connect: GoodConnectInput, connectOrCreate: GoodConnectOrCreateInput, create: GoodRelationInput, delete: GoodDeleteInput, disconnect: GoodDisconnectInput, update: GoodUpdateInput, where: GoodWhere): UpdateGoodsMutationResponse!
  updateOrganizations(connect: OrganizationConnectInput, connectOrCreate: OrganizationConnectOrCreateInput, create: OrganizationRelationInput, delete: OrganizationDeleteInput, disconnect: OrganizationDisconnectInput, update: OrganizationUpdateInput, where: OrganizationWhere): UpdateOrganizationsMutationResponse!
  updateSources(update: SourceUpdateInput, where: SourceWhere): UpdateSourcesMutationResponse!
  updateTransactions(connect: TransactionConnectInput, connectOrCreate: TransactionConnectOrCreateInput, create: TransactionRelationInput, delete: TransactionDeleteInput, disconnect: TransactionDisconnectInput, update: TransactionUpdateInput, where: TransactionWhere): UpdateTransactionsMutationResponse!
}

type Organization implements Entity {
  ambassadors(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  ambassadorsAggregate(directed: Boolean = true, where: CitizenWhere): OrganizationCitizenAmbassadorsAggregationSelection
  ambassadorsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAmbassadorsConnectionSort!], where: EntityAmbassadorsConnectionWhere): EntityAmbassadorsConnection!
  assets(directed: Boolean = true, options: AssetOptions, where: AssetWhere): [Asset!]!
  assetsAggregate(directed: Boolean = true, where: AssetWhere): OrganizationAssetAssetsAggregationSelection
  assetsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityAssetsConnectionSort!], where: EntityAssetsConnectionWhere): EntityAssetsConnection!
  causes(directed: Boolean = true, options: CauseOptions, where: CauseWhere): [Cause!]!
  causesAggregate(directed: Boolean = true, where: CauseWhere): OrganizationCauseCausesAggregationSelection
  causesConnection(after: String, directed: Boolean = true, first: Int, sort: [OrganizationCausesConnectionSort!], where: OrganizationCausesConnectionWhere): OrganizationCausesConnection!
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): OrganizationCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [OrganizationCreatedByConnectionSort!], where: OrganizationCreatedByConnectionWhere): OrganizationCreatedByConnection!
  email: String
  fundsBalance: GenericBalance!
  geoLocation: Point
  goods(directed: Boolean = true, options: GoodOptions, where: GoodWhere): [Good!]!
  goodsAggregate(directed: Boolean = true, where: GoodWhere): OrganizationGoodGoodsAggregationSelection
  goodsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityGoodsConnectionSort!], where: EntityGoodsConnectionWhere): EntityGoodsConnection!
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  taxNo: String!
  transactions(directed: Boolean = true, options: TransactionOptions, where: TransactionWhere): [Transaction!]!
  transactionsAggregate(directed: Boolean = true, where: TransactionWhere): OrganizationTransactionTransactionsAggregationSelection
  transactionsConnection(after: String, directed: Boolean = true, first: Int, sort: [EntityTransactionsConnectionSort!], where: EntityTransactionsConnectionWhere): EntityTransactionsConnection!
  updatedAt: DateTime!
  volunteerTimeHoursBalance: GenericBalance!
}

type OrganizationAggregateSelection {
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationAmbassadorsAggregateInput {
  AND: [OrganizationAmbassadorsAggregateInput!]
  NOT: OrganizationAmbassadorsAggregateInput
  OR: [OrganizationAmbassadorsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationAmbassadorsNodeAggregationWhereInput
}

type OrganizationAmbassadorsConnectedRelationship {
  node: CitizenEventPayload!
}

input OrganizationAmbassadorsNodeAggregationWhereInput {
  AND: [OrganizationAmbassadorsNodeAggregationWhereInput!]
  NOT: OrganizationAmbassadorsNodeAggregationWhereInput
  OR: [OrganizationAmbassadorsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input OrganizationAmbassadorsRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

type OrganizationAssetAssetsAggregationSelection {
  count: Int!
  node: OrganizationAssetAssetsNodeAggregateSelection
}

type OrganizationAssetAssetsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationAssetsAggregateInput {
  AND: [OrganizationAssetsAggregateInput!]
  NOT: OrganizationAssetsAggregateInput
  OR: [OrganizationAssetsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationAssetsNodeAggregationWhereInput
}

type OrganizationAssetsConnectedRelationship {
  node: AssetEventPayload!
}

input OrganizationAssetsNodeAggregationWhereInput {
  AND: [OrganizationAssetsNodeAggregationWhereInput!]
  NOT: OrganizationAssetsNodeAggregationWhereInput
  OR: [OrganizationAssetsNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input OrganizationAssetsRelationshipSubscriptionWhere {
  node: AssetSubscriptionWhere
}

type OrganizationCauseCausesAggregationSelection {
  count: Int!
  node: OrganizationCauseCausesNodeAggregateSelection
}

type OrganizationCauseCausesNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  image: StringAggregateSelectionNullable!
  name: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationCausesAggregateInput {
  AND: [OrganizationCausesAggregateInput!]
  NOT: OrganizationCausesAggregateInput
  OR: [OrganizationCausesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationCausesNodeAggregationWhereInput
}

input OrganizationCausesConnectFieldInput {
  connect: [CauseConnectInput!]

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CauseConnectWhere
}

input OrganizationCausesConnectOrCreateFieldInput {
  onCreate: OrganizationCausesConnectOrCreateFieldInputOnCreate!
  where: CauseConnectOrCreateWhere!
}

input OrganizationCausesConnectOrCreateFieldInputOnCreate {
  node: CauseOnCreateInput!
}

type OrganizationCausesConnectedRelationship {
  node: CauseEventPayload!
}

type OrganizationCausesConnection {
  edges: [OrganizationCausesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input OrganizationCausesConnectionSort {
  node: CauseSort
}

input OrganizationCausesConnectionWhere {
  AND: [OrganizationCausesConnectionWhere!]
  NOT: OrganizationCausesConnectionWhere
  OR: [OrganizationCausesConnectionWhere!]
  node: CauseWhere
}

input OrganizationCausesCreateFieldInput {
  node: CauseCreateInput!
}

input OrganizationCausesDeleteFieldInput {
  delete: CauseDeleteInput
  where: OrganizationCausesConnectionWhere
}

input OrganizationCausesDisconnectFieldInput {
  disconnect: CauseDisconnectInput
  where: OrganizationCausesConnectionWhere
}

input OrganizationCausesFieldInput {
  connect: [OrganizationCausesConnectFieldInput!]
  connectOrCreate: [OrganizationCausesConnectOrCreateFieldInput!]
  create: [OrganizationCausesCreateFieldInput!]
}

input OrganizationCausesNodeAggregationWhereInput {
  AND: [OrganizationCausesNodeAggregationWhereInput!]
  NOT: OrganizationCausesNodeAggregationWhereInput
  OR: [OrganizationCausesNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  image_AVERAGE_LENGTH_EQUAL: Float
  image_AVERAGE_LENGTH_GT: Float
  image_AVERAGE_LENGTH_GTE: Float
  image_AVERAGE_LENGTH_LT: Float
  image_AVERAGE_LENGTH_LTE: Float
  image_LONGEST_LENGTH_EQUAL: Int
  image_LONGEST_LENGTH_GT: Int
  image_LONGEST_LENGTH_GTE: Int
  image_LONGEST_LENGTH_LT: Int
  image_LONGEST_LENGTH_LTE: Int
  image_SHORTEST_LENGTH_EQUAL: Int
  image_SHORTEST_LENGTH_GT: Int
  image_SHORTEST_LENGTH_GTE: Int
  image_SHORTEST_LENGTH_LT: Int
  image_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type OrganizationCausesRelationship {
  cursor: String!
  node: Cause!
}

input OrganizationCausesRelationshipSubscriptionWhere {
  node: CauseSubscriptionWhere
}

input OrganizationCausesUpdateConnectionInput {
  node: CauseUpdateInput
}

input OrganizationCausesUpdateFieldInput {
  connect: [OrganizationCausesConnectFieldInput!]
  connectOrCreate: [OrganizationCausesConnectOrCreateFieldInput!]
  create: [OrganizationCausesCreateFieldInput!]
  delete: [OrganizationCausesDeleteFieldInput!]
  disconnect: [OrganizationCausesDisconnectFieldInput!]
  update: OrganizationCausesUpdateConnectionInput
  where: OrganizationCausesConnectionWhere
}

type OrganizationCitizenAmbassadorsAggregationSelection {
  count: Int!
  node: OrganizationCitizenAmbassadorsNodeAggregateSelection
}

type OrganizationCitizenAmbassadorsNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type OrganizationCitizenCreatedByAggregationSelection {
  count: Int!
  node: OrganizationCitizenCreatedByNodeAggregateSelection
}

type OrganizationCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationConnectInput {
  ambassadors: [EntityAmbassadorsConnectFieldInput!]
  assets: [EntityAssetsConnectFieldInput!]
  causes: [OrganizationCausesConnectFieldInput!]
  createdBy: OrganizationCreatedByConnectFieldInput
  goods: [EntityGoodsConnectFieldInput!]
  transactions: [EntityTransactionsConnectFieldInput!]
}

input OrganizationConnectOrCreateInput {
  ambassadors: [EntityAmbassadorsConnectOrCreateFieldInput!]
  assets: [EntityAssetsConnectOrCreateFieldInput!]
  causes: [OrganizationCausesConnectOrCreateFieldInput!]
  createdBy: OrganizationCreatedByConnectOrCreateFieldInput
  goods: [EntityGoodsConnectOrCreateFieldInput!]
  transactions: [EntityTransactionsConnectOrCreateFieldInput!]
}

input OrganizationConnectOrCreateWhere {
  node: OrganizationUniqueWhere!
}

input OrganizationConnectWhere {
  node: OrganizationWhere!
}

type OrganizationConnectedRelationships {
  ambassadors: OrganizationAmbassadorsConnectedRelationship
  assets: OrganizationAssetsConnectedRelationship
  causes: OrganizationCausesConnectedRelationship
  createdBy: OrganizationCreatedByConnectedRelationship
  goods: OrganizationGoodsConnectedRelationship
  transactions: OrganizationTransactionsConnectedRelationship
}

input OrganizationCreateInput {
  ambassadors: EntityAmbassadorsFieldInput
  assets: EntityAssetsFieldInput
  causes: OrganizationCausesFieldInput
  createdBy: OrganizationCreatedByFieldInput
  email: String
  geoLocation: PointInput
  goods: EntityGoodsFieldInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  taxNo: String!
  transactions: EntityTransactionsFieldInput
}

input OrganizationCreatedByAggregateInput {
  AND: [OrganizationCreatedByAggregateInput!]
  NOT: OrganizationCreatedByAggregateInput
  OR: [OrganizationCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationCreatedByNodeAggregationWhereInput
}

input OrganizationCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input OrganizationCreatedByConnectOrCreateFieldInput {
  onCreate: OrganizationCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input OrganizationCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type OrganizationCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type OrganizationCreatedByConnection {
  edges: [OrganizationCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input OrganizationCreatedByConnectionSort {
  node: CitizenSort
}

input OrganizationCreatedByConnectionWhere {
  AND: [OrganizationCreatedByConnectionWhere!]
  NOT: OrganizationCreatedByConnectionWhere
  OR: [OrganizationCreatedByConnectionWhere!]
  node: CitizenWhere
}

input OrganizationCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input OrganizationCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: OrganizationCreatedByConnectionWhere
}

input OrganizationCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: OrganizationCreatedByConnectionWhere
}

input OrganizationCreatedByFieldInput {
  connect: OrganizationCreatedByConnectFieldInput
  connectOrCreate: OrganizationCreatedByConnectOrCreateFieldInput
  create: OrganizationCreatedByCreateFieldInput
}

input OrganizationCreatedByNodeAggregationWhereInput {
  AND: [OrganizationCreatedByNodeAggregationWhereInput!]
  NOT: OrganizationCreatedByNodeAggregationWhereInput
  OR: [OrganizationCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type OrganizationCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input OrganizationCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input OrganizationCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input OrganizationCreatedByUpdateFieldInput {
  connect: OrganizationCreatedByConnectFieldInput
  connectOrCreate: OrganizationCreatedByConnectOrCreateFieldInput
  create: OrganizationCreatedByCreateFieldInput
  delete: OrganizationCreatedByDeleteFieldInput
  disconnect: OrganizationCreatedByDisconnectFieldInput
  update: OrganizationCreatedByUpdateConnectionInput
  where: OrganizationCreatedByConnectionWhere
}

type OrganizationCreatedEvent {
  createdOrganization: OrganizationEventPayload!
  event: EventType!
  timestamp: Float!
}

input OrganizationDeleteInput {
  ambassadors: [EntityAmbassadorsDeleteFieldInput!]
  assets: [EntityAssetsDeleteFieldInput!]
  causes: [OrganizationCausesDeleteFieldInput!]
  createdBy: OrganizationCreatedByDeleteFieldInput
  goods: [EntityGoodsDeleteFieldInput!]
  transactions: [EntityTransactionsDeleteFieldInput!]
}

type OrganizationDeletedEvent {
  deletedOrganization: OrganizationEventPayload!
  event: EventType!
  timestamp: Float!
}

input OrganizationDisconnectInput {
  ambassadors: [EntityAmbassadorsDisconnectFieldInput!]
  assets: [EntityAssetsDisconnectFieldInput!]
  causes: [OrganizationCausesDisconnectFieldInput!]
  createdBy: OrganizationCreatedByDisconnectFieldInput
  goods: [EntityGoodsDisconnectFieldInput!]
  transactions: [EntityTransactionsDisconnectFieldInput!]
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

type OrganizationEventPayload implements EntityEventPayload {
  ambassadors: [Citizen!]!
  ambassadorsConnection: EntityAmbassadorsConnection!
  assets: [Asset!]!
  assetsConnection: EntityAssetsConnection!
  createdAt: DateTime!
  email: String
  geoLocation: Point
  goods: [Good!]!
  goodsConnection: EntityGoodsConnection!
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  taxNo: String!
  transactions: [Transaction!]!
  transactionsConnection: EntityTransactionsConnection!
  updatedAt: DateTime!
}

type OrganizationGoodGoodsAggregationSelection {
  count: Int!
  node: OrganizationGoodGoodsNodeAggregateSelection
}

type OrganizationGoodGoodsNodeAggregateSelection {
  barCode: StringAggregateSelectionNullable!
  code: StringAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  description: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationGoodsAggregateInput {
  AND: [OrganizationGoodsAggregateInput!]
  NOT: OrganizationGoodsAggregateInput
  OR: [OrganizationGoodsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationGoodsNodeAggregationWhereInput
}

type OrganizationGoodsConnectedRelationship {
  node: GoodEventPayload!
}

input OrganizationGoodsNodeAggregationWhereInput {
  AND: [OrganizationGoodsNodeAggregationWhereInput!]
  NOT: OrganizationGoodsNodeAggregationWhereInput
  OR: [OrganizationGoodsNodeAggregationWhereInput!]
  barCode_AVERAGE_LENGTH_EQUAL: Float
  barCode_AVERAGE_LENGTH_GT: Float
  barCode_AVERAGE_LENGTH_GTE: Float
  barCode_AVERAGE_LENGTH_LT: Float
  barCode_AVERAGE_LENGTH_LTE: Float
  barCode_LONGEST_LENGTH_EQUAL: Int
  barCode_LONGEST_LENGTH_GT: Int
  barCode_LONGEST_LENGTH_GTE: Int
  barCode_LONGEST_LENGTH_LT: Int
  barCode_LONGEST_LENGTH_LTE: Int
  barCode_SHORTEST_LENGTH_EQUAL: Int
  barCode_SHORTEST_LENGTH_GT: Int
  barCode_SHORTEST_LENGTH_GTE: Int
  barCode_SHORTEST_LENGTH_LT: Int
  barCode_SHORTEST_LENGTH_LTE: Int
  code_AVERAGE_LENGTH_EQUAL: Float
  code_AVERAGE_LENGTH_GT: Float
  code_AVERAGE_LENGTH_GTE: Float
  code_AVERAGE_LENGTH_LT: Float
  code_AVERAGE_LENGTH_LTE: Float
  code_LONGEST_LENGTH_EQUAL: Int
  code_LONGEST_LENGTH_GT: Int
  code_LONGEST_LENGTH_GTE: Int
  code_LONGEST_LENGTH_LT: Int
  code_LONGEST_LENGTH_LTE: Int
  code_SHORTEST_LENGTH_EQUAL: Int
  code_SHORTEST_LENGTH_GT: Int
  code_SHORTEST_LENGTH_GTE: Int
  code_SHORTEST_LENGTH_LT: Int
  code_SHORTEST_LENGTH_LTE: Int
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  description_AVERAGE_LENGTH_EQUAL: Float
  description_AVERAGE_LENGTH_GT: Float
  description_AVERAGE_LENGTH_GTE: Float
  description_AVERAGE_LENGTH_LT: Float
  description_AVERAGE_LENGTH_LTE: Float
  description_LONGEST_LENGTH_EQUAL: Int
  description_LONGEST_LENGTH_GT: Int
  description_LONGEST_LENGTH_GTE: Int
  description_LONGEST_LENGTH_LT: Int
  description_LONGEST_LENGTH_LTE: Int
  description_SHORTEST_LENGTH_EQUAL: Int
  description_SHORTEST_LENGTH_GT: Int
  description_SHORTEST_LENGTH_GTE: Int
  description_SHORTEST_LENGTH_LT: Int
  description_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input OrganizationGoodsRelationshipSubscriptionWhere {
  node: GoodSubscriptionWhere
}

input OrganizationOnCreateInput {
  email: String
  geoLocation: PointInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String!
  taxNo: String!
}

input OrganizationOptions {
  limit: Int
  offset: Int

  """
  Specify one or more OrganizationSort objects to sort Organizations by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [OrganizationSort!]
}

input OrganizationRelationInput {
  ambassadors: [EntityAmbassadorsCreateFieldInput!]
  assets: [EntityAssetsCreateFieldInput!]
  causes: [OrganizationCausesCreateFieldInput!]
  createdBy: OrganizationCreatedByCreateFieldInput
  goods: [EntityGoodsCreateFieldInput!]
  transactions: [EntityTransactionsCreateFieldInput!]
}

type OrganizationRelationshipCreatedEvent {
  createdRelationship: OrganizationConnectedRelationships!
  event: EventType!
  organization: OrganizationEventPayload!
  relationshipFieldName: String!
  timestamp: Float!
}

input OrganizationRelationshipCreatedSubscriptionWhere {
  createdRelationship: OrganizationRelationshipsSubscriptionWhere
  organization: OrganizationSubscriptionWhere
}

type OrganizationRelationshipDeletedEvent {
  deletedRelationship: OrganizationConnectedRelationships!
  event: EventType!
  organization: OrganizationEventPayload!
  relationshipFieldName: String!
  timestamp: Float!
}

input OrganizationRelationshipDeletedSubscriptionWhere {
  deletedRelationship: OrganizationRelationshipsSubscriptionWhere
  organization: OrganizationSubscriptionWhere
}

input OrganizationRelationshipsSubscriptionWhere {
  ambassadors: OrganizationAmbassadorsRelationshipSubscriptionWhere
  assets: OrganizationAssetsRelationshipSubscriptionWhere
  causes: OrganizationCausesRelationshipSubscriptionWhere
  createdBy: OrganizationCreatedByRelationshipSubscriptionWhere
  goods: OrganizationGoodsRelationshipSubscriptionWhere
  transactions: OrganizationTransactionsRelationshipSubscriptionWhere
}

"""
Fields to sort Organizations by. The order in which sorts are applied is not guaranteed when specifying many fields in one OrganizationSort object.
"""
input OrganizationSort {
  createdAt: SortDirection
  email: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  name: SortDirection
  taxNo: SortDirection
  updatedAt: SortDirection
}

input OrganizationSubscriptionWhere {
  AND: [OrganizationSubscriptionWhere!]
  NOT: OrganizationSubscriptionWhere
  OR: [OrganizationSubscriptionWhere!]
  createdAt: DateTime
  createdAt_IN: [DateTime]
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_STARTS_WITH: String
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String]
  taxNo_STARTS_WITH: String
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

type OrganizationTransactionTransactionsAggregationSelection {
  count: Int!
  node: OrganizationTransactionTransactionsNodeAggregateSelection
}

type OrganizationTransactionTransactionsNodeAggregateSelection {
  amount: FloatAggregateSelectionNonNullable!
  createdAt: DateTimeAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input OrganizationTransactionsAggregateInput {
  AND: [OrganizationTransactionsAggregateInput!]
  NOT: OrganizationTransactionsAggregateInput
  OR: [OrganizationTransactionsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: OrganizationTransactionsNodeAggregationWhereInput
}

type OrganizationTransactionsConnectedRelationship {
  node: TransactionEventPayload!
}

input OrganizationTransactionsNodeAggregationWhereInput {
  AND: [OrganizationTransactionsNodeAggregationWhereInput!]
  NOT: OrganizationTransactionsNodeAggregationWhereInput
  OR: [OrganizationTransactionsNodeAggregationWhereInput!]
  amount_AVERAGE_EQUAL: Float
  amount_AVERAGE_GT: Float
  amount_AVERAGE_GTE: Float
  amount_AVERAGE_LT: Float
  amount_AVERAGE_LTE: Float
  amount_MAX_EQUAL: Float
  amount_MAX_GT: Float
  amount_MAX_GTE: Float
  amount_MAX_LT: Float
  amount_MAX_LTE: Float
  amount_MIN_EQUAL: Float
  amount_MIN_GT: Float
  amount_MIN_GTE: Float
  amount_MIN_LT: Float
  amount_MIN_LTE: Float
  amount_SUM_EQUAL: Float
  amount_SUM_GT: Float
  amount_SUM_GTE: Float
  amount_SUM_LT: Float
  amount_SUM_LTE: Float
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

input OrganizationTransactionsRelationshipSubscriptionWhere {
  node: TransactionSubscriptionWhere
}

input OrganizationUniqueWhere {
  email: String
  id: ID
  name: String
  taxNo: String
}

input OrganizationUpdateInput {
  ambassadors: [EntityAmbassadorsUpdateFieldInput!]
  assets: [EntityAssetsUpdateFieldInput!]
  causes: [OrganizationCausesUpdateFieldInput!]
  createdBy: OrganizationCreatedByUpdateFieldInput
  email: String
  geoLocation: PointInput
  goods: [EntityGoodsUpdateFieldInput!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  name: String
  taxNo: String
  transactions: [EntityTransactionsUpdateFieldInput!]
}

type OrganizationUpdatedEvent {
  event: EventType!
  previousState: OrganizationEventPayload!
  timestamp: Float!
  updatedOrganization: OrganizationEventPayload!
}

input OrganizationWhere {
  AND: [OrganizationWhere!]
  NOT: OrganizationWhere
  OR: [OrganizationWhere!]
  ambassadorsAggregate: OrganizationAmbassadorsAggregateInput
  ambassadorsConnection_ALL: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_NONE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SINGLE: EntityAmbassadorsConnectionWhere
  ambassadorsConnection_SOME: EntityAmbassadorsConnectionWhere

  """
  Return Organizations where all of the related Citizens match this filter
  """
  ambassadors_ALL: CitizenWhere

  """
  Return Organizations where none of the related Citizens match this filter
  """
  ambassadors_NONE: CitizenWhere

  """
  Return Organizations where one of the related Citizens match this filter
  """
  ambassadors_SINGLE: CitizenWhere

  """
  Return Organizations where some of the related Citizens match this filter
  """
  ambassadors_SOME: CitizenWhere
  assetsAggregate: OrganizationAssetsAggregateInput
  assetsConnection_ALL: EntityAssetsConnectionWhere
  assetsConnection_NONE: EntityAssetsConnectionWhere
  assetsConnection_SINGLE: EntityAssetsConnectionWhere
  assetsConnection_SOME: EntityAssetsConnectionWhere

  """Return Organizations where all of the related Assets match this filter"""
  assets_ALL: AssetWhere

  """
  Return Organizations where none of the related Assets match this filter
  """
  assets_NONE: AssetWhere

  """Return Organizations where one of the related Assets match this filter"""
  assets_SINGLE: AssetWhere

  """
  Return Organizations where some of the related Assets match this filter
  """
  assets_SOME: AssetWhere
  causesAggregate: OrganizationCausesAggregateInput
  causesConnection_ALL: OrganizationCausesConnectionWhere
  causesConnection_NONE: OrganizationCausesConnectionWhere
  causesConnection_SINGLE: OrganizationCausesConnectionWhere
  causesConnection_SOME: OrganizationCausesConnectionWhere

  """Return Organizations where all of the related Causes match this filter"""
  causes_ALL: CauseWhere

  """
  Return Organizations where none of the related Causes match this filter
  """
  causes_NONE: CauseWhere

  """Return Organizations where one of the related Causes match this filter"""
  causes_SINGLE: CauseWhere

  """
  Return Organizations where some of the related Causes match this filter
  """
  causes_SOME: CauseWhere
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: OrganizationCreatedByAggregateInput
  createdByConnection: OrganizationCreatedByConnectionWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String]
  email_STARTS_WITH: String
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  goodsAggregate: OrganizationGoodsAggregateInput
  goodsConnection_ALL: EntityGoodsConnectionWhere
  goodsConnection_NONE: EntityGoodsConnectionWhere
  goodsConnection_SINGLE: EntityGoodsConnectionWhere
  goodsConnection_SOME: EntityGoodsConnectionWhere

  """Return Organizations where all of the related Goods match this filter"""
  goods_ALL: GoodWhere

  """Return Organizations where none of the related Goods match this filter"""
  goods_NONE: GoodWhere

  """Return Organizations where one of the related Goods match this filter"""
  goods_SINGLE: GoodWhere

  """Return Organizations where some of the related Goods match this filter"""
  goods_SOME: GoodWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_STARTS_WITH: String
  taxNo: String
  taxNo_CONTAINS: String
  taxNo_ENDS_WITH: String
  taxNo_IN: [String!]
  taxNo_STARTS_WITH: String
  transactionsAggregate: OrganizationTransactionsAggregateInput
  transactionsConnection_ALL: EntityTransactionsConnectionWhere
  transactionsConnection_NONE: EntityTransactionsConnectionWhere
  transactionsConnection_SINGLE: EntityTransactionsConnectionWhere
  transactionsConnection_SOME: EntityTransactionsConnectionWhere

  """
  Return Organizations where all of the related Transactions match this filter
  """
  transactions_ALL: TransactionWhere

  """
  Return Organizations where none of the related Transactions match this filter
  """
  transactions_NONE: TransactionWhere

  """
  Return Organizations where one of the related Transactions match this filter
  """
  transactions_SINGLE: TransactionWhere

  """
  Return Organizations where some of the related Transactions match this filter
  """
  transactions_SOME: TransactionWhere
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type OrganizationsConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Pagination information (Relay)"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Point {
  crs: String!
  height: Float
  latitude: Float!
  longitude: Float!
  srid: Int!
}

input PointDistance {
  """The distance in metres to be used when comparing two points"""
  distance: Float!
  point: PointInput!
}

input PointInput {
  height: Float
  latitude: Float!
  longitude: Float!
}

type Query {
  assets(options: AssetOptions, where: AssetWhere): [Asset!]!
  assetsAggregate(where: AssetWhere): AssetAggregateSelection!
  assetsConnection(after: String, first: Int, sort: [AssetSort], where: AssetWhere): AssetsConnection!
  causes(options: CauseOptions, where: CauseWhere): [Cause!]!
  causesAggregate(where: CauseWhere): CauseAggregateSelection!
  causesConnection(after: String, first: Int, sort: [CauseSort], where: CauseWhere): CausesConnection!
  citizens(options: CitizenOptions, where: CitizenWhere): [Citizen!]!
  citizensAggregate(where: CitizenWhere): CitizenAggregateSelection!
  citizensConnection(after: String, first: Int, sort: [CitizenSort], where: CitizenWhere): CitizensConnection!
  goods(options: GoodOptions, where: GoodWhere): [Good!]!
  goodsAggregate(where: GoodWhere): GoodAggregateSelection!
  goodsConnection(after: String, first: Int, sort: [GoodSort], where: GoodWhere): GoodsConnection!
  organizations(options: OrganizationOptions, where: OrganizationWhere): [Organization!]!
  organizationsAggregate(where: OrganizationWhere): OrganizationAggregateSelection!
  organizationsConnection(after: String, first: Int, sort: [OrganizationSort], where: OrganizationWhere): OrganizationsConnection!
  sources(options: SourceOptions, where: SourceWhere): [Source!]!
  sourcesAggregate(where: SourceWhere): SourceAggregateSelection!
  sourcesConnection(after: String, first: Int, sort: [SourceSort], where: SourceWhere): SourcesConnection!
  transactions(options: TransactionOptions, where: TransactionWhere): [Transaction!]!
  transactionsAggregate(where: TransactionWhere): TransactionAggregateSelection!
  transactionsConnection(after: String, first: Int, sort: [TransactionSort], where: TransactionWhere): TransactionsConnection!
}

input QueryOptions {
  limit: Int
  offset: Int
}

enum ResourceType {
  ASSET
  FUNDS
  GENERIC_GOODS
  VOLUNTEERING_HOURS
}

enum SortDirection {
  """Sort by field values in ascending order."""
  ASC

  """Sort by field values in descending order."""
  DESC
}

type Source {
  id: String!
  metaData: JSONObject
  metaDataInternal: JSONObject
}

type SourceAggregateSelection {
  count: Int!
  id: StringAggregateSelectionNonNullable!
}

input SourceConnectWhere {
  node: SourceWhere!
}

input SourceCreateInput {
  id: String!
  metaData: JSONObject
  metaDataInternal: JSONObject
}

type SourceCreatedEvent {
  createdSource: SourceEventPayload!
  event: EventType!
  timestamp: Float!
}

type SourceDeletedEvent {
  deletedSource: SourceEventPayload!
  event: EventType!
  timestamp: Float!
}

type SourceEdge {
  cursor: String!
  node: Source!
}

type SourceEventPayload {
  id: String!
  metaData: JSONObject
  metaDataInternal: JSONObject
}

input SourceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more SourceSort objects to sort Sources by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [SourceSort!]
}

"""
Fields to sort Sources by. The order in which sorts are applied is not guaranteed when specifying many fields in one SourceSort object.
"""
input SourceSort {
  id: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
}

input SourceSubscriptionWhere {
  AND: [SourceSubscriptionWhere!]
  NOT: SourceSubscriptionWhere
  OR: [SourceSubscriptionWhere!]
  id: String
  id_CONTAINS: String
  id_ENDS_WITH: String
  id_IN: [String]
  id_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
}

input SourceUpdateInput {
  id: String
  metaData: JSONObject
  metaDataInternal: JSONObject
}

type SourceUpdatedEvent {
  event: EventType!
  previousState: SourceEventPayload!
  timestamp: Float!
  updatedSource: SourceEventPayload!
}

input SourceWhere {
  AND: [SourceWhere!]
  NOT: SourceWhere
  OR: [SourceWhere!]
  id: String
  id_CONTAINS: String
  id_ENDS_WITH: String
  id_IN: [String!]
  id_STARTS_WITH: String
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
}

type SourcesConnection {
  edges: [SourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StringAggregateSelectionNonNullable {
  longest: String!
  shortest: String!
}

type StringAggregateSelectionNullable {
  longest: String
  shortest: String
}

type Subscription {
  assetCreated(where: AssetSubscriptionWhere): AssetCreatedEvent!
  assetDeleted(where: AssetSubscriptionWhere): AssetDeletedEvent!
  assetRelationshipCreated(where: AssetRelationshipCreatedSubscriptionWhere): AssetRelationshipCreatedEvent!
  assetRelationshipDeleted(where: AssetRelationshipDeletedSubscriptionWhere): AssetRelationshipDeletedEvent!
  assetUpdated(where: AssetSubscriptionWhere): AssetUpdatedEvent!
  causeCreated(where: CauseSubscriptionWhere): CauseCreatedEvent!
  causeDeleted(where: CauseSubscriptionWhere): CauseDeletedEvent!
  causeRelationshipCreated(where: CauseRelationshipCreatedSubscriptionWhere): CauseRelationshipCreatedEvent!
  causeRelationshipDeleted(where: CauseRelationshipDeletedSubscriptionWhere): CauseRelationshipDeletedEvent!
  causeUpdated(where: CauseSubscriptionWhere): CauseUpdatedEvent!
  citizenCreated(where: CitizenSubscriptionWhere): CitizenCreatedEvent!
  citizenDeleted(where: CitizenSubscriptionWhere): CitizenDeletedEvent!
  citizenRelationshipCreated(where: CitizenRelationshipCreatedSubscriptionWhere): CitizenRelationshipCreatedEvent!
  citizenRelationshipDeleted(where: CitizenRelationshipDeletedSubscriptionWhere): CitizenRelationshipDeletedEvent!
  citizenUpdated(where: CitizenSubscriptionWhere): CitizenUpdatedEvent!
  goodCreated(where: GoodSubscriptionWhere): GoodCreatedEvent!
  goodDeleted(where: GoodSubscriptionWhere): GoodDeletedEvent!
  goodRelationshipCreated(where: GoodRelationshipCreatedSubscriptionWhere): GoodRelationshipCreatedEvent!
  goodRelationshipDeleted(where: GoodRelationshipDeletedSubscriptionWhere): GoodRelationshipDeletedEvent!
  goodUpdated(where: GoodSubscriptionWhere): GoodUpdatedEvent!
  organizationCreated(where: OrganizationSubscriptionWhere): OrganizationCreatedEvent!
  organizationDeleted(where: OrganizationSubscriptionWhere): OrganizationDeletedEvent!
  organizationRelationshipCreated(where: OrganizationRelationshipCreatedSubscriptionWhere): OrganizationRelationshipCreatedEvent!
  organizationRelationshipDeleted(where: OrganizationRelationshipDeletedSubscriptionWhere): OrganizationRelationshipDeletedEvent!
  organizationUpdated(where: OrganizationSubscriptionWhere): OrganizationUpdatedEvent!
  sourceCreated(where: SourceSubscriptionWhere): SourceCreatedEvent!
  sourceDeleted(where: SourceSubscriptionWhere): SourceDeletedEvent!
  sourceUpdated(where: SourceSubscriptionWhere): SourceUpdatedEvent!
  transactionCreated(where: TransactionSubscriptionWhere): TransactionCreatedEvent!
  transactionDeleted(where: TransactionSubscriptionWhere): TransactionDeletedEvent!
  transactionRelationshipCreated(where: TransactionRelationshipCreatedSubscriptionWhere): TransactionRelationshipCreatedEvent!
  transactionRelationshipDeleted(where: TransactionRelationshipDeletedSubscriptionWhere): TransactionRelationshipDeletedEvent!
  transactionUpdated(where: TransactionSubscriptionWhere): TransactionUpdatedEvent!
}

type Transaction {
  amount: Float!
  assets: [AssetItems!]
  createdAt: DateTime!
  createdBy(directed: Boolean = true, options: CitizenOptions, where: CitizenWhere): Citizen!
  createdByAggregate(directed: Boolean = true, where: CitizenWhere): TransactionCitizenCreatedByAggregationSelection
  createdByConnection(after: String, directed: Boolean = true, first: Int, sort: [TransactionCreatedByConnectionSort!], where: TransactionCreatedByConnectionWhere): TransactionCreatedByConnection!
  currency: CurrencyType!
  geoLocation: Point
  goods: [GoodItems!]
  id: ID!
  input(directed: Boolean = true, options: EntityOptions, where: EntityWhere): Entity!
  inputConnection(after: String, directed: Boolean = true, first: Int, sort: [TransactionInputConnectionSort!], where: TransactionInputConnectionWhere): TransactionInputConnection!
  metaData: JSONObject
  metaDataInternal: JSONObject
  output(directed: Boolean = true, options: EntityOptions, where: EntityWhere): Entity!
  outputConnection(after: String, directed: Boolean = true, first: Int, sort: [TransactionOutputConnectionSort!], where: TransactionOutputConnectionWhere): TransactionOutputConnection!
  resourceType: ResourceType!
  transactionType: TransactionType!
  updatedAt: DateTime!
}

type TransactionAggregateSelection {
  amount: FloatAggregateSelectionNonNullable!
  count: Int!
  createdAt: DateTimeAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

type TransactionCitizenCreatedByAggregationSelection {
  count: Int!
  node: TransactionCitizenCreatedByNodeAggregateSelection
}

type TransactionCitizenCreatedByNodeAggregateSelection {
  createdAt: DateTimeAggregateSelectionNonNullable!
  email: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  phoneNumber: StringAggregateSelectionNonNullable!
  taxNo: StringAggregateSelectionNonNullable!
  updatedAt: DateTimeAggregateSelectionNonNullable!
}

input TransactionConnectInput {
  createdBy: TransactionCreatedByConnectFieldInput
  input: TransactionInputConnectFieldInput
  output: TransactionOutputConnectFieldInput
}

input TransactionConnectOrCreateInput {
  createdBy: TransactionCreatedByConnectOrCreateFieldInput
}

input TransactionConnectOrCreateWhere {
  node: TransactionUniqueWhere!
}

input TransactionConnectWhere {
  node: TransactionWhere!
}

type TransactionConnectedRelationships {
  createdBy: TransactionCreatedByConnectedRelationship
  input: TransactionInputConnectedRelationship
  output: TransactionOutputConnectedRelationship
}

input TransactionCreateInput {
  amount: Float!
  createdBy: TransactionCreatedByFieldInput
  currency: CurrencyType!
  geoLocation: PointInput
  input: TransactionInputFieldInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  output: TransactionOutputFieldInput
  resourceType: ResourceType!
  transactionType: TransactionType!
}

input TransactionCreatedByAggregateInput {
  AND: [TransactionCreatedByAggregateInput!]
  NOT: TransactionCreatedByAggregateInput
  OR: [TransactionCreatedByAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TransactionCreatedByNodeAggregationWhereInput
}

input TransactionCreatedByConnectFieldInput {
  connect: CitizenConnectInput

  """
  Whether or not to overwrite any matching relationship with the new properties. Will default to `false` in 4.0.0.
  """
  overwrite: Boolean! = true
  where: CitizenConnectWhere
}

input TransactionCreatedByConnectOrCreateFieldInput {
  onCreate: TransactionCreatedByConnectOrCreateFieldInputOnCreate!
  where: CitizenConnectOrCreateWhere!
}

input TransactionCreatedByConnectOrCreateFieldInputOnCreate {
  node: CitizenOnCreateInput!
}

type TransactionCreatedByConnectedRelationship {
  node: CitizenEventPayload!
}

type TransactionCreatedByConnection {
  edges: [TransactionCreatedByRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TransactionCreatedByConnectionSort {
  node: CitizenSort
}

input TransactionCreatedByConnectionWhere {
  AND: [TransactionCreatedByConnectionWhere!]
  NOT: TransactionCreatedByConnectionWhere
  OR: [TransactionCreatedByConnectionWhere!]
  node: CitizenWhere
}

input TransactionCreatedByCreateFieldInput {
  node: CitizenCreateInput!
}

input TransactionCreatedByDeleteFieldInput {
  delete: CitizenDeleteInput
  where: TransactionCreatedByConnectionWhere
}

input TransactionCreatedByDisconnectFieldInput {
  disconnect: CitizenDisconnectInput
  where: TransactionCreatedByConnectionWhere
}

input TransactionCreatedByFieldInput {
  connect: TransactionCreatedByConnectFieldInput
  connectOrCreate: TransactionCreatedByConnectOrCreateFieldInput
  create: TransactionCreatedByCreateFieldInput
}

input TransactionCreatedByNodeAggregationWhereInput {
  AND: [TransactionCreatedByNodeAggregationWhereInput!]
  NOT: TransactionCreatedByNodeAggregationWhereInput
  OR: [TransactionCreatedByNodeAggregationWhereInput!]
  createdAt_MAX_EQUAL: DateTime
  createdAt_MAX_GT: DateTime
  createdAt_MAX_GTE: DateTime
  createdAt_MAX_LT: DateTime
  createdAt_MAX_LTE: DateTime
  createdAt_MIN_EQUAL: DateTime
  createdAt_MIN_GT: DateTime
  createdAt_MIN_GTE: DateTime
  createdAt_MIN_LT: DateTime
  createdAt_MIN_LTE: DateTime
  email_AVERAGE_LENGTH_EQUAL: Float
  email_AVERAGE_LENGTH_GT: Float
  email_AVERAGE_LENGTH_GTE: Float
  email_AVERAGE_LENGTH_LT: Float
  email_AVERAGE_LENGTH_LTE: Float
  email_LONGEST_LENGTH_EQUAL: Int
  email_LONGEST_LENGTH_GT: Int
  email_LONGEST_LENGTH_GTE: Int
  email_LONGEST_LENGTH_LT: Int
  email_LONGEST_LENGTH_LTE: Int
  email_SHORTEST_LENGTH_EQUAL: Int
  email_SHORTEST_LENGTH_GT: Int
  email_SHORTEST_LENGTH_GTE: Int
  email_SHORTEST_LENGTH_LT: Int
  email_SHORTEST_LENGTH_LTE: Int
  name_AVERAGE_LENGTH_EQUAL: Float
  name_AVERAGE_LENGTH_GT: Float
  name_AVERAGE_LENGTH_GTE: Float
  name_AVERAGE_LENGTH_LT: Float
  name_AVERAGE_LENGTH_LTE: Float
  name_LONGEST_LENGTH_EQUAL: Int
  name_LONGEST_LENGTH_GT: Int
  name_LONGEST_LENGTH_GTE: Int
  name_LONGEST_LENGTH_LT: Int
  name_LONGEST_LENGTH_LTE: Int
  name_SHORTEST_LENGTH_EQUAL: Int
  name_SHORTEST_LENGTH_GT: Int
  name_SHORTEST_LENGTH_GTE: Int
  name_SHORTEST_LENGTH_LT: Int
  name_SHORTEST_LENGTH_LTE: Int
  phoneNumber_AVERAGE_LENGTH_EQUAL: Float
  phoneNumber_AVERAGE_LENGTH_GT: Float
  phoneNumber_AVERAGE_LENGTH_GTE: Float
  phoneNumber_AVERAGE_LENGTH_LT: Float
  phoneNumber_AVERAGE_LENGTH_LTE: Float
  phoneNumber_LONGEST_LENGTH_EQUAL: Int
  phoneNumber_LONGEST_LENGTH_GT: Int
  phoneNumber_LONGEST_LENGTH_GTE: Int
  phoneNumber_LONGEST_LENGTH_LT: Int
  phoneNumber_LONGEST_LENGTH_LTE: Int
  phoneNumber_SHORTEST_LENGTH_EQUAL: Int
  phoneNumber_SHORTEST_LENGTH_GT: Int
  phoneNumber_SHORTEST_LENGTH_GTE: Int
  phoneNumber_SHORTEST_LENGTH_LT: Int
  phoneNumber_SHORTEST_LENGTH_LTE: Int
  taxNo_AVERAGE_LENGTH_EQUAL: Float
  taxNo_AVERAGE_LENGTH_GT: Float
  taxNo_AVERAGE_LENGTH_GTE: Float
  taxNo_AVERAGE_LENGTH_LT: Float
  taxNo_AVERAGE_LENGTH_LTE: Float
  taxNo_LONGEST_LENGTH_EQUAL: Int
  taxNo_LONGEST_LENGTH_GT: Int
  taxNo_LONGEST_LENGTH_GTE: Int
  taxNo_LONGEST_LENGTH_LT: Int
  taxNo_LONGEST_LENGTH_LTE: Int
  taxNo_SHORTEST_LENGTH_EQUAL: Int
  taxNo_SHORTEST_LENGTH_GT: Int
  taxNo_SHORTEST_LENGTH_GTE: Int
  taxNo_SHORTEST_LENGTH_LT: Int
  taxNo_SHORTEST_LENGTH_LTE: Int
  updatedAt_MAX_EQUAL: DateTime
  updatedAt_MAX_GT: DateTime
  updatedAt_MAX_GTE: DateTime
  updatedAt_MAX_LT: DateTime
  updatedAt_MAX_LTE: DateTime
  updatedAt_MIN_EQUAL: DateTime
  updatedAt_MIN_GT: DateTime
  updatedAt_MIN_GTE: DateTime
  updatedAt_MIN_LT: DateTime
  updatedAt_MIN_LTE: DateTime
}

type TransactionCreatedByRelationship {
  cursor: String!
  node: Citizen!
}

input TransactionCreatedByRelationshipSubscriptionWhere {
  node: CitizenSubscriptionWhere
}

input TransactionCreatedByUpdateConnectionInput {
  node: CitizenUpdateInput
}

input TransactionCreatedByUpdateFieldInput {
  connect: TransactionCreatedByConnectFieldInput
  connectOrCreate: TransactionCreatedByConnectOrCreateFieldInput
  create: TransactionCreatedByCreateFieldInput
  delete: TransactionCreatedByDeleteFieldInput
  disconnect: TransactionCreatedByDisconnectFieldInput
  update: TransactionCreatedByUpdateConnectionInput
  where: TransactionCreatedByConnectionWhere
}

type TransactionCreatedEvent {
  createdTransaction: TransactionEventPayload!
  event: EventType!
  timestamp: Float!
}

input TransactionDeleteInput {
  createdBy: TransactionCreatedByDeleteFieldInput
  input: TransactionInputDeleteFieldInput
  output: TransactionOutputDeleteFieldInput
}

type TransactionDeletedEvent {
  deletedTransaction: TransactionEventPayload!
  event: EventType!
  timestamp: Float!
}

input TransactionDisconnectInput {
  createdBy: TransactionCreatedByDisconnectFieldInput
  input: TransactionInputDisconnectFieldInput
  output: TransactionOutputDisconnectFieldInput
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

type TransactionEventPayload {
  amount: Float!
  createdAt: DateTime!
  currency: CurrencyType!
  geoLocation: Point
  id: ID!
  metaData: JSONObject
  metaDataInternal: JSONObject
  resourceType: ResourceType!
  transactionType: TransactionType!
  updatedAt: DateTime!
}

input TransactionInputConnectFieldInput {
  connect: EntityConnectInput
  where: EntityConnectWhere
}

type TransactionInputConnectedRelationship {
  node: EntityEventPayload!
}

type TransactionInputConnection {
  edges: [TransactionInputRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TransactionInputConnectionSort {
  node: EntitySort
}

input TransactionInputConnectionWhere {
  AND: [TransactionInputConnectionWhere!]
  NOT: TransactionInputConnectionWhere
  OR: [TransactionInputConnectionWhere!]
  node: EntityWhere
}

input TransactionInputCreateFieldInput {
  node: EntityCreateInput!
}

input TransactionInputDeleteFieldInput {
  delete: EntityDeleteInput
  where: TransactionInputConnectionWhere
}

input TransactionInputDisconnectFieldInput {
  disconnect: EntityDisconnectInput
  where: TransactionInputConnectionWhere
}

input TransactionInputFieldInput {
  connect: TransactionInputConnectFieldInput
  create: TransactionInputCreateFieldInput
}

type TransactionInputRelationship {
  cursor: String!
  node: Entity!
}

input TransactionInputRelationshipSubscriptionWhere {
  node: EntitySubscriptionWhere
}

input TransactionInputUpdateConnectionInput {
  node: EntityUpdateInput
}

input TransactionInputUpdateFieldInput {
  connect: TransactionInputConnectFieldInput
  create: TransactionInputCreateFieldInput
  delete: TransactionInputDeleteFieldInput
  disconnect: TransactionInputDisconnectFieldInput
  update: TransactionInputUpdateConnectionInput
  where: TransactionInputConnectionWhere
}

input TransactionOnCreateInput {
  amount: Float!
  currency: CurrencyType!
  geoLocation: PointInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  resourceType: ResourceType!
  transactionType: TransactionType!
}

input TransactionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TransactionSort objects to sort Transactions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TransactionSort!]
}

input TransactionOutputConnectFieldInput {
  connect: EntityConnectInput
  where: EntityConnectWhere
}

type TransactionOutputConnectedRelationship {
  node: EntityEventPayload!
}

type TransactionOutputConnection {
  edges: [TransactionOutputRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TransactionOutputConnectionSort {
  node: EntitySort
}

input TransactionOutputConnectionWhere {
  AND: [TransactionOutputConnectionWhere!]
  NOT: TransactionOutputConnectionWhere
  OR: [TransactionOutputConnectionWhere!]
  node: EntityWhere
}

input TransactionOutputCreateFieldInput {
  node: EntityCreateInput!
}

input TransactionOutputDeleteFieldInput {
  delete: EntityDeleteInput
  where: TransactionOutputConnectionWhere
}

input TransactionOutputDisconnectFieldInput {
  disconnect: EntityDisconnectInput
  where: TransactionOutputConnectionWhere
}

input TransactionOutputFieldInput {
  connect: TransactionOutputConnectFieldInput
  create: TransactionOutputCreateFieldInput
}

type TransactionOutputRelationship {
  cursor: String!
  node: Entity!
}

input TransactionOutputRelationshipSubscriptionWhere {
  node: EntitySubscriptionWhere
}

input TransactionOutputUpdateConnectionInput {
  node: EntityUpdateInput
}

input TransactionOutputUpdateFieldInput {
  connect: TransactionOutputConnectFieldInput
  create: TransactionOutputCreateFieldInput
  delete: TransactionOutputDeleteFieldInput
  disconnect: TransactionOutputDisconnectFieldInput
  update: TransactionOutputUpdateConnectionInput
  where: TransactionOutputConnectionWhere
}

input TransactionRelationInput {
  createdBy: TransactionCreatedByCreateFieldInput
  input: TransactionInputCreateFieldInput
  output: TransactionOutputCreateFieldInput
}

type TransactionRelationshipCreatedEvent {
  createdRelationship: TransactionConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
  transaction: TransactionEventPayload!
}

input TransactionRelationshipCreatedSubscriptionWhere {
  createdRelationship: TransactionRelationshipsSubscriptionWhere
  transaction: TransactionSubscriptionWhere
}

type TransactionRelationshipDeletedEvent {
  deletedRelationship: TransactionConnectedRelationships!
  event: EventType!
  relationshipFieldName: String!
  timestamp: Float!
  transaction: TransactionEventPayload!
}

input TransactionRelationshipDeletedSubscriptionWhere {
  deletedRelationship: TransactionRelationshipsSubscriptionWhere
  transaction: TransactionSubscriptionWhere
}

input TransactionRelationshipsSubscriptionWhere {
  createdBy: TransactionCreatedByRelationshipSubscriptionWhere
  input: TransactionInputRelationshipSubscriptionWhere
  output: TransactionOutputRelationshipSubscriptionWhere
}

"""
Fields to sort Transactions by. The order in which sorts are applied is not guaranteed when specifying many fields in one TransactionSort object.
"""
input TransactionSort {
  amount: SortDirection
  createdAt: SortDirection
  currency: SortDirection
  geoLocation: SortDirection
  id: SortDirection
  metaData: SortDirection
  metaDataInternal: SortDirection
  resourceType: SortDirection
  transactionType: SortDirection
  updatedAt: SortDirection
}

input TransactionSubscriptionWhere {
  AND: [TransactionSubscriptionWhere!]
  NOT: TransactionSubscriptionWhere
  OR: [TransactionSubscriptionWhere!]
  amount: Float
  amount_GT: Float
  amount_GTE: Float
  amount_IN: [Float]
  amount_LT: Float
  amount_LTE: Float
  createdAt: DateTime
  createdAt_IN: [DateTime]
  currency: CurrencyType
  currency_IN: [CurrencyType]
  geoLocation: PointInput
  geoLocation_IN: [PointInput]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID]
  id_STARTS_WITH: ID
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  resourceType: ResourceType
  resourceType_IN: [ResourceType]
  transactionType: TransactionType
  transactionType_IN: [TransactionType]
  updatedAt: DateTime
  updatedAt_IN: [DateTime]
}

enum TransactionType {
  TRANSFER_ASSET
  TRANSFER_FUNDS
  TRANSFER_GOODS
  TRANSFER_VOLUNTEERING_HOURS
  TRANSFER_VOUCHER
}

input TransactionUniqueWhere {
  id: ID
}

input TransactionUpdateInput {
  amount: Float
  amount_ADD: Float
  amount_DIVIDE: Float
  amount_MULTIPLY: Float
  amount_SUBTRACT: Float
  createdBy: TransactionCreatedByUpdateFieldInput
  currency: CurrencyType
  geoLocation: PointInput
  input: TransactionInputUpdateFieldInput
  metaData: JSONObject
  metaDataInternal: JSONObject
  output: TransactionOutputUpdateFieldInput
  resourceType: ResourceType
  transactionType: TransactionType
}

type TransactionUpdatedEvent {
  event: EventType!
  previousState: TransactionEventPayload!
  timestamp: Float!
  updatedTransaction: TransactionEventPayload!
}

input TransactionWhere {
  AND: [TransactionWhere!]
  NOT: TransactionWhere
  OR: [TransactionWhere!]
  amount: Float
  amount_GT: Float
  amount_GTE: Float
  amount_IN: [Float!]
  amount_LT: Float
  amount_LTE: Float
  createdAt: DateTime
  createdAt_GT: DateTime
  createdAt_GTE: DateTime
  createdAt_IN: [DateTime!]
  createdAt_LT: DateTime
  createdAt_LTE: DateTime
  createdByAggregate: TransactionCreatedByAggregateInput
  createdByConnection: TransactionCreatedByConnectionWhere
  currency: CurrencyType
  currency_IN: [CurrencyType!]
  geoLocation: PointInput
  geoLocation_DISTANCE: PointDistance
  geoLocation_GT: PointDistance
  geoLocation_GTE: PointDistance
  geoLocation_IN: [PointInput]
  geoLocation_LT: PointDistance
  geoLocation_LTE: PointDistance
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_STARTS_WITH: ID
  inputConnection: TransactionInputConnectionWhere
  metaData: JSONObject
  metaDataInternal: JSONObject
  metaDataInternal_IN: [JSONObject]
  metaData_IN: [JSONObject]
  outputConnection: TransactionOutputConnectionWhere
  resourceType: ResourceType
  resourceType_IN: [ResourceType!]
  transactionType: TransactionType
  transactionType_IN: [TransactionType!]
  updatedAt: DateTime
  updatedAt_GT: DateTime
  updatedAt_GTE: DateTime
  updatedAt_IN: [DateTime!]
  updatedAt_LT: DateTime
  updatedAt_LTE: DateTime
}

type TransactionsConnection {
  edges: [TransactionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UpdateAssetsMutationResponse {
  assets: [Asset!]!
  info: UpdateInfo!
}

type UpdateCausesMutationResponse {
  causes: [Cause!]!
  info: UpdateInfo!
}

type UpdateCitizensMutationResponse {
  citizens: [Citizen!]!
  info: UpdateInfo!
}

type UpdateGoodsMutationResponse {
  goods: [Good!]!
  info: UpdateInfo!
}

type UpdateInfo {
  bookmark: String
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateOrganizationsMutationResponse {
  info: UpdateInfo!
  organizations: [Organization!]!
}

type UpdateSourcesMutationResponse {
  info: UpdateInfo!
  sources: [Source!]!
}

type UpdateTransactionsMutationResponse {
  info: UpdateInfo!
  transactions: [Transaction!]!
}
